<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[git] squash merge 된 branch 를 rebase 할 때 생기는 이슈 - onto 옵션의 활용</title>
    <url>/2019/11/03/git-rebase-onto/</url>
    <content><![CDATA[<h1 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h1><p><strong>1.초기 브랜치 상황</strong></p>
<pre><code>// old_feature
A - B - C - D

// master
A

// new_feature (dependent old feature)
A - B - C - D - E - F - G - H</code></pre><p><strong>2. squash merge</strong></p>
<p>이후 old_feature 가 squash merge 로 master 에 반영되었다.</p>
<pre><code>// master
A - X</code></pre><p><strong>3. conflict 발생</strong></p>
<p>new_feature 작업이 마무리된 후, 변경된 master 를 기준으로 rebase 하여 PR 을 날리려고 시도하였다. </p>
<p><strong>기대한 브랜치</strong></p>
<pre><code>// new_feature (rebase from master)
A - X - E - F - G - H</code></pre><p>그런데 conflict 가 발생하면서 old_feature 의 커밋 ‘A - D’ 를 순차적으로 resolve 처리해야하는 상황이 발생했다. <strong>master 의 커밋 ‘X’ 에 이미 old_feature 브랜치의 변경사항이 모두 반영되어 있는데</strong>, 왜 이런 일이 발생하는 것일까?  </p>
<h1 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h1><p>원인을 알아보기 위해  Rebase 가 진행되는 과정을 살펴보도록 하자. </p>
<pre><code>git rebase master</code></pre><p>이렇게 아무런 옵션을 주지 않고 rebase 명령을 요청할 경우 다음과 같은 과정으로 진행된다.</p>
<ol>
<li>체크아웃 된 브랜치와 master 브랜치가 나뉘기 전인 공통의 조상 커밋으로 이동한다.</li>
<li>공통 커밋부터 체크아웃 된 브랜치의 HEAD 까지 diff를 만든다.</li>
<li>만들어진 diff 를 순차적으로 적용한다.</li>
</ol>
<p>위 과정을 베이스로 conflict 가 난 상황을 다시 재현 해보자.</p>
<ol>
<li>new_feature 를 master branch 를 통해 리베이스 한다.</li>
<li>master 와 new_feature 의 공통 커밋인 <strong>A 로 이동한다</strong>.<ul>
<li>old_feature 와 new_feature 의 공통 커밋은 D 이지만, 스쿼시 옵션으로 인해 <strong>old_feature 의 ‘B~D’ 커밋이 X로 통합 되었으므로</strong> 리베이스 과정에서는 D 를 찾을 수 없다.</li>
</ul>
</li>
<li>A 부터 new_feature 의 HEAD 까지  순차적으로 diff 를 적용한다.</li>
<li>B,C,D 의 diff 를 반영할 때 <strong>X 에는 B,C,D 의 내용이 이미 반영되어있으므로</strong> 중복된 내용에 대해 다시conflict 가 발생하고 과정이 꼬이게 된다.</li>
</ol>
<p><strong>결론</strong><br>squash 로 인해 기존의 공통 커밋이 새로운 커밋으로 통합되어 사라지게 되면서, rebase 과정에서 conflict 가 발생  </p>
<h1 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h1><p>원인은 rebase 의 기본 동작을 수행했을 때 A 부터 시작되는 것이었다. 그렇다면 old_feature 가 반영된 X 커밋 이후로 rebase 를 수행하도록 하면 명령할 수 는 없을까?</p>
<p>다행히도 <code>rebase 에서는 --onto 옵션을 제공하여 rebase 가 동작할 범위를 지정</code>할 수 있다.</p>
<pre><code>git rebase --onto master HEAD~4</code></pre><p>위와 같이 요청할 경우 rebase 는 HEAD 를 포함하여 최근 4개의 커밋 범위까지 rebase 를 수행한다. 즉, new_feature 기준으로 E - F - G - H 범위 내에서 rebase 가 수행된다. master 에는 E~H 에 대한 내용이 없으므로 conflict 발생없이 한줄로 예쁘게 rebase 가 완료된다.</p>
<p><strong>rebase 가 완료된 브랜치</strong></p>
<pre><code>// new_feature
A - X - E&apos; - F&apos; - G&apos; - H&apos;</code></pre><p><strong>번외</strong></p>
<p>commit 범위를 지정하는 것이 번거로울 경우 아래와 같은 방법으로 동일한 결과를 얻을 수 있다. </p>
<pre><code>git rebase --onto master old_feature new_feature</code></pre><p>해당 명령은 old_feature 에 존재하는 커밋을 제외하고, new_feature 에 대해 rebase 를 수행한다. 따라서 new_feature 에서, B-D 커밋이 제외되고 E-H 커밋에 대해 rebase 가 진행된다.</p>
<p>단, 해당 방법은 old_feature 가 삭제 되지 않았을 경우에만 사용이 가능하다는 단점이 있다.</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[도서] 오브젝트 정리 Chapter 4 (캡슐화, 응집도, 결합도)</title>
    <url>/2019/10/20/object-book-4/</url>
    <content><![CDATA[<p>이번 글에서는 데이터 중심 클래스의 정의와 단점을 알아보고, 이를 해결하기 위한 방법으로 캡슐화와 응집도/결합도에 대한 완전한 이해를 얻어가는 것이 목적이다.</p>
<h1 id="데이터-중심으로-설계된-클래스"><a href="#데이터-중심으로-설계된-클래스" class="headerlink" title="데이터 중심으로 설계된 클래스"></a>데이터 중심으로 설계된 클래스</h1><p><a href="https://vagabond95.github.io/2019/10/13/object-book-1-3/">이전글</a> 내용을 살펴보면 객체지향 애플리케이션을 구현하는 것은 각 객체가 책임을 수행하며 서로간의 협력을 통해 공동체를 구축한다는 것을 의미한다. 즉, 중요한 것은 객체가 다른 객체와 <strong>협력하는 방법</strong>이며, 각 객체가 내부에 어떤 상태를 가지고 관리하는 지에 대한 것은 부가적인 문제일 뿐이다.  </p>
<p>그러나, 우리가 일반적으로 클래스를 설계하는 과정은 어떨까? </p>
<ol>
<li>처음부터 객체간의 협력과 책임에 대해 고민하는 것은 머리아프다.</li>
<li>따라서 우선 클래스에 어떤 데이터가 들어가야할지 결정한다.</li>
<li>또한 어떤 상황에서도 객체가 사용될 수 있게 최대한 많은 getter/setter 를 추가한다.  </li>
</ol>
<p>이러한 설계방식을 <strong>데이터 중심 설계</strong> (혹자는 추측에 의한 설계전략)라고 부르며, 데이터 중심 설계는 객체의 외부가 아닌 내부에 초점을 맞추게 된다. </p>
<p>데이터 중심 클래스의 객체는 단순한 데이터의 집합일 뿐이다. 따라서 제공되는 메소드는 과도한 접근자와 수정자 뿐이며, 이 데이터를 사용하여 로직을 수행하는 일은 별도의 객체에서 수행하게 된다. 이로 인하여 객체의 인터페이스에 내부 구현이 노출되고, 인터페이스를 이용하여 협력하는 또다른 객체 역시 데이터 중심 클래스의 내부구현에 종속되게 된다. (캡슐화가 이루어지지 않음) 문제는 <strong>객체의 내부 구현은 언제든 변화가 생길 수 있다는 점</strong>이다. 따라서 데이터 중심의 설계는 변화가 발생했을 때 협력하는 모든 객체가 영향을 받게되므로 변화에 매우 취약한  설계방식 이다. </p>
<h1 id="캡슐화-응집도-결합도"><a href="#캡슐화-응집도-결합도" class="headerlink" title="캡슐화, 응집도, 결합도"></a>캡슐화, 응집도, 결합도</h1><p>좋은 객체지향 설계의 척도를 이야기할 때 빠지지 않고 등장하는 얘기들이 있다. 캡슐화가 잘되어야한다. 높은 응집도와 낮은 결합도를 가져야한다. 귀에 못박히도록 들었으나 해당 문장이 가지고 있는 진정한 의미를 이해하고 있었다고 단언할 수 있을까?</p>
<h2 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a>캡슐화</h2><p>캡슐화가 무엇일까? 라고 질문하면 “객체 내부 구현을 외부로부터 감추는 것이다.” 라고 쉽게 얘기할 수 있다. 구현레벨에서는 접근 제한자를 이용하여 맴버변수를 숨기고 getter/setter 를 구성하며 캡슐화가 적용된 코드라고 얘기하곤 한다.</p>
<p>안타깝게도 위 내용은 캡슐화의 본질을 온전히 이해하고 있지 못하고 있다. 캡슐화는 분명 내부구현을 외부로부터 감추는 것이 맞다. 하지만 중요한 것은 <strong>왜 감추느냐</strong>는 것이다. 위에서 얘기한 데이터 중심의 설계방식을 살펴보면 그 이유를 알 수 있다. 캡슐화를 통해 감추는 이유는 내부구현을 숨김으로 인하여 내부구현의 변화가 발생하더라도 협력하는 <strong>외부 객체에 변화의 영향이 퍼져나가지 않도록 막기 위함</strong>이다. </p>
<p>너무 당연한 얘기일까? 그렇다면 다시 질문해보자. 접근제한자로 변수를 숨기고 getter/setter 를 통해 접근 및 조작하는 것은 캡슐화가 이루어진 것이라고 할 수 있을까? 캡슐화를 한 것은 맞다. 이러한 방식을 데이터 캡슐화라고 부른다. 그러나 데이터 캡슐화만으로는 캡슐화의 목적을 달성하지 못한다. getter 가 제공된다는 것은 필연적으로 어떤 로직을 수행하기 위해 해당 데이터가 필요하다는 의미이며, 그 로직은 또다른 객체에서 수행될 수 밖에없다. 그리고 만약 getter 의 return type 이 바뀐다면? 또다른 객체 역시 내용을 변경할 수 밖에 없다. 이러한 케이스를 <strong>객체의 내부구현이 드러난다</strong>고 표현한다.  캡슐화의 목적은 내부구현을 숨기는 것인데, 데이터 캡슐화만으로는 내부구현이 드러나게 되는 아이러니한 상황이 발생하는 것이다. (내부구현은 return type 뿐만 아니라 parameter, method 자체 로도 드러날 수 있다.)</p>
<pre><code>// 캡슐화의 목적이 이루어지지 않은 클래스
public class Movie {
    private String title;

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }
}</code></pre><p>자, 데이터를 숨기는 것만으로는 캡슐화의 목적이 달성될 수 없음을 알았다. 그렇다면 어떤 수준까지 해야할까? 책에서는 다음과 같이 얘기하고 있다.</p>
<blockquote>
<p>다시한번 강조하지만 캡슐화란 변할 수 있는 어떤 것이라도 감추는 것이다. 그것이 속성의 타입이건, 할인 정책의 종류건 상관없이 내부 구현의 변경으로 인해 외부가 객체가 영향을 받는다면 캡슐화를 위반한 것이다.</p>
</blockquote>
<p>변경될 수 있는 모든 것을 감추는 것, 그것만이 캡슐화의 목적에 다다를 수 있다. 그리고 이러한 규칙은 협력을 잘 구성하고 책임을 스스로 수행할 수 있도록 구성하면 자연스레 지켜지게 된다. 즉 캡슐화를 하기 위해 일련의 작업들을 수행하는 것이 아니라, 객체지향 프로그래밍의 규칙을 지키다보면 자연스럽게 캡슐화가 보장되어가는 형태가 된다.</p>
<p>그래도 역시 이해하기에 모호한 부분이 있다. 그래서 캡슐화가 잘 되었는지 파악할 수 있는 기준들을 소개하고자 한다.</p>
<h2 id="응집도와-결합도"><a href="#응집도와-결합도" class="headerlink" title="응집도와 결합도"></a>응집도와 결합도</h2><p>응집도와 결합도는 소프트웨어품질을 측정하기 위한 기준이지만 캡슐화의 정도를 측정할때도 유용하게 활용될 수 있다. 객체지향 관점에서 각 개념은 다음과 같이 풀어내고 있다.</p>
<ul>
<li><strong>응집도</strong>는 클래스/객체에 얼마나 관련 높은 책임이 할당되었는지를 나타낸다.</li>
<li><strong>결합도</strong>는 클래스/객체가 협력에 필요한 적절한 수준의 관계만 유지하고 있는지 나타낸다.</li>
</ul>
<p>… 객체지향을 오해하기 쉬운 이유는 이러한 애매하고 추상적인 개념들을 명확하게 이해하기가 어렵기 때문이라고 생각한다.</p>
<p>처음으로 돌아가 생각해보자. 좋은 설계란 무엇인가? 변경하기 쉬운 설계이다. 그리고 높은 응집도와 낮은 결합도를 가졌을 때 우리는 좋은 설계라고 부르곤한다. 따라서 각 개념은 결국 <strong>변경</strong>과 관련이 있다는 얘기가 된다. 변경의 관점에서 다시한번 각 개념을 살펴보자.</p>
<p>어플리케이션에 여러 모듈(객체)가 있을 때</p>
<ul>
<li><p><strong>(변경의 관점에서) 응집도</strong>는 변경이 발생했을 때 어플리케이션내에서 변경이 발생하는 정도를 의미한다. 예를들어 특정 기능에 대한 변경이 있을때 대해 하나의 모듈만 변경된다면 응집도가 높고, 다수의 모듈이 함께 변경돼야하면 응집도가 낮다고 할 수 있다.</p>
<p>  응집도가 낮다면 하나의 변경점에 대해 다수 모듈의 변경이 동반되기 때문에 변경에 부담이 생기기 시작한다.</p>
</li>
<li><p><strong>(변경의 관점에서) 결합도</strong>는 하나의 모듈에서 변경이 발생했을 때, 다른 모듈의 변경을 요구하는 정도를 의미한다. 예를들어 하나의 모듈을 수정했을 때 함께 변경해야하는 모듈의 수가 많을 수록 결합도가 높다고 할 수 있다.</p>
<p>  결합도가 높다면 모듈의 내부구현이 변경되었을 때 영향을 받는 모듈 수가 많으므로 변경에 부담이 생기기 시작한다.</p>
</li>
</ul>
<p>위 개념을 잘 이해했다면 왜 높은 응집도와 낮은 결합도가 충족된 것이 좋은 설계인것인지 알 수 있을 것이다.</p>
<p>위에서 살펴본 데이터 중심설계는 낮은 응집도와 높은 결합도를 가진 객체를 양산하기 쉬운 방식인데 이유는 다음과 같다.</p>
<p>응집도 개념에서 살펴보면, 객체의 클래스가 데이터를 중심으로 설계되었으므로 해당 객체의 책임은 데이터를 조작하고 내뱉는 것 그 이상도 이하도 아니다. 즉 데이터를 제공하는 객체가 스스로 일을 처리하지 못하므로, 로직을 수행하는 객체가 이를 수행하게 된다. 문제는 로직을 수행하는 객체가 또다른 데이터를 제공하는 객체를 맡기 시작할 경우 해당 객체의 책임은 점점 비대해지고 둘중 한쪽에서만 변경이 발생해도 필연적으로 같이 영향을 받게 된다. 하나의 클래스에서 변경이 발생했는데 전혀 연관이 없을 것같은 부분에서 사이드 이펙트가 발생하는 케이스가 대표적으로 각 클래스의 응집도가 낮은 상황이다.</p>
<p>결합도 개념에서 살펴보면, 마찬가지로 데이터를 제공하는 객체가 스스로 일을 처리하지 못하므로 해당 데이터를 다른 객체에서 처리하게 된다. 만약 해당 객체의 데이터가 변경될 경우 (parameter, type) 데이터를 사용하는 모든 객체에게 변화의 영향이 퍼지게 된다.</p>
<p>결국 내용을 돌아보면 다시 객체의 책임과 협력으로 귀결된다. 다음 글에서는 어떻게 객체에 책임을 잘 할당할 수 있는지에 대해 알아보자.</p>
<h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><ul>
<li>우리는 데이터 중심의 설계를 하고있었을 확률이 높다.</li>
<li>캡슐화의 진정한 목적을 항상 기억하자.</li>
<li>코드를 변경하기 어렵다면 응집도/결합도 정도를 점검해보자.</li>
<li>결국 좋은 설계란 <strong>변경하기 쉬운</strong> 설계다.</li>
</ul>
]]></content>
      <tags>
        <tag>Book</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>[도서] 오브젝트 정리 Chapter 1 - 3</title>
    <url>/2019/10/13/object-book-1-3/</url>
    <content><![CDATA[<p>변경은 언제든 찾아올 수 있다. 변경은 피할 수 없다. 이러한 사실을 깨달은 사람들은 변경에 유연하게 대응할 수 있는 방법을 고민해왔고 이에 다영한 해결법이 제시되었다. 이번에 다루게 될 객체지향 프로그래밍도 그 중 하나라고 할 수 있다. </p>
<p>객체지향 프로그래밍. 익숙하지만 제대로 이해하고 활용하고 있다고 얘기하기는 어려운 그런 녀석이었다. Java 를 사용하면 객체지향일까? 클래스 개념을 활용하면 객체지향일까? 안타깝게도 Java 내에서 class 를 사용해도 얼마든지 절차지향적인 코드가 나올 수 있고, 실제로도 그런 코드를 많이 양산해왔다. 객체지향적인 설계에 대한 고민이 깊어질때 즘 ‘객체지향의 사실과 오해’ 책으로 알게된 조영호님의 신간이 나왔음을 들었고 ‘오브젝트’ 책을 읽기 시작했다. 이번 포스팅은 챕터 1 ~ 3 을 읽고 정리하는 내용으로 채웠다.</p>
<h1 id="객체간의-협력과-책임-설계-레벨"><a href="#객체간의-협력과-책임-설계-레벨" class="headerlink" title="객체간의 협력과 책임 (설계 레벨)"></a>객체간의 협력과 책임 (설계 레벨)</h1><blockquote>
<p>OOP 설계의 핵심은 협력을 구성하기 위해 적절한 객체를 찾고 적절한 책임을 할당하는 과정에서 드러난다. 클래스와 상속은 객체들의 책임과 협력이 어느 정도 자리를 잡은 후에 사용할 수 있는 구현 메커니즘일 뿐이다.</p>
</blockquote>
<h2 id="잘못된-방식"><a href="#잘못된-방식" class="headerlink" title="잘못된 방식"></a>잘못된 방식</h2><p>OOP 를 막 입문하면 가장 흔하게 하는 실수가 객체의 행동이 아닌 상태에 초점을 맞추는 것이다. 객체의 상태를 먼저 결정하고, 상태에 필요한 행동을 결정한다. 이런 방식은 객체의 내부 구현이 객체의 퍼블릭 인터페이스에 노출되도록 만들기 때문에 캡슐화를 저해한다. 또한 객체의 내부 구현은 언제든 바뀔 수 있기 때문에 결국 외부에 변화가 전파된다.</p>
<h2 id="객체지향-관점에서-객체의-구성-방식"><a href="#객체지향-관점에서-객체의-구성-방식" class="headerlink" title="객체지향 관점에서 객체의 구성 방식"></a>객체지향 관점에서 객체의 구성 방식</h2><p>→ 객체는 어떤 협력을 참여하는가</p>
<p>→ 협력을 위해서 어떤 행동을 해야하는가</p>
<p>→ 행동하기 위해서 어떤 상태를 가져야하는가</p>
<h3 id="1-객체간의-협력과-수행해야할-책임을-파악할-것"><a href="#1-객체간의-협력과-수행해야할-책임을-파악할-것" class="headerlink" title="1. 객체간의 협력과 수행해야할 책임을 파악할 것"></a>1. 객체간의 협력과 수행해야할 책임을 파악할 것</h3><blockquote>
<p>어플리케이션안에 어떤 객체가 필요하다면 그 이유는 단 하나여야 한다. 객체가 어떤 협력에 참여하고 있기 때문이다. 그리고 객체가 협력에 참여할 수 있는 이유는 협력에 필요한 적절한 행동을 보유하고 있기 때문이다.</p>
</blockquote>
<p>객체가 책임을 할당하는 데 필요한 메세지를 먼저 식별하고, 메세지를 처리할 객체를 나중에 선택하는 것이 중요하다. 이런 방식으로 객체를 구성할 경우 다음과 같은 이점이 있다.</p>
<ol>
<li>객체가 최소한의 퍼블릭 인터페이스를 가질 수 있게 된다.</li>
<li>객체의 퍼블릭 인터페이스는 무엇을 하는지만 나타낼 뿐, 어떻게 수행하는지가 노출되지 않는다.</li>
</ol>
<h3 id="2-책임을-수행하기-위해-필요한-상태-및-내부-구현-정의"><a href="#2-책임을-수행하기-위해-필요한-상태-및-내부-구현-정의" class="headerlink" title="2. 책임을 수행하기 위해 필요한 상태 및 내부 구현 정의"></a>2. 책임을 수행하기 위해 필요한 상태 및 내부 구현 정의</h3><p>객체의 퍼블릭 인터페이스가 정해졌다면, 다음으로는 퍼블릭 인터페이스로 들어온 요청을 객체 스스로 처리할 수 있도록 구성해야한다. 즉, 내부 구현 및 내부 구현에 필요한 상태의 정의가 필요하다. 객체의 상태는 그 객체가 행동을 수행하는 데 필요한 정보가 무엇인지로 결정된다. 객체는 자신의 상태를 스스로 결정하고 관리하는 자율적인 존재이기 때문이다.</p>
<p>협력관계속에서 다른 객체에게 무엇을 제공해야 하고 다른 객체로부터 무엇을 얻어야 하는지를 고민해야만 훌륭한 책임을 수확할 수 있다.</p>
<h3 id="3-책임을-조합하여-역할을-정의"><a href="#3-책임을-조합하여-역할을-정의" class="headerlink" title="3. 책임을 조합하여 역할을 정의"></a>3. 책임을 조합하여 역할을 정의</h3><p>어느정도 객체의 책임이 정의되었다면 객체의 역할을 정의할 수 있다. 코드레벨에서는 Java 기준으로 ‘interface, abstract class 를 구현한다.’ 라고도 얘기할 수 있다. 객체의 역할을 정의해주는 것이 중요한 이유는 동일한 협력을 수행하는 객체들을 추상화할 수 있기 때문이다. 협력관계가 역할이라는 추상화된 형태로 묶일 경우 당연히 변화에도 대응하기 쉬워진다. 책에서는 객체의 역할에 대해 다음과 같이 비유했다.</p>
<ul>
<li>서로 다른 배우들(객체)이 동일한 배역(역할)을 연기할 수 있다.</li>
<li>하나의 배우(객체)가 서로 다른 배역(역할)을 연기할 수 있다.</li>
</ul>
<p>협력이라는 문맥 안에서 역할은 특정한 협력에 참여해서 책임을 수행하는 객체의 일부다. 역할은 객체의 구조나 상태에 의해 정의될 수 없으며, 시스템의 문맥 안에서 무엇을 하는지에 의해서만 정의될 수 있음을 주의해야한다. </p>
<p>번외로, 오직 한 종류의 객체만 협력에 참여하는 상황에서 역할이라는 개념을 고려하는 것이 유용할까? 역할이라는 개념을 생략하고 직접 객체를 이용해 협력을 설계하는 것이 더 좋지 않을까? 라는 궁금증이 생길 수 있다. 책에서 내린 결론은 다음과 같다.</p>
<p>“협력에 적합한 책임을 수행하는 대상이 한 종류라면, 간단하게 객체를 이용하면 된다. 만약 여러 종류의 객체가 협력에 이용될 수 있다면 협력의 대상은 역할이 될 것이다.</p>
<p><strong>하지만 설계 초반에는 적절한 책임과 협력의 큰 그림을 탐색하는 것이 가장 중요한 목표여야 하고 역할과 객체를 명확하게 구분하는 것은 그렇게 중요하지는 않다는 것이다.</strong>“</p>
<p>즉, 상황에 맞게 역할(추상화된 형태) 혹은 객체 (구체적인 형태)를 잘 선택해서 사용하되, 어차피 바뀔 수 있는 내용이므로 설계 초기에는 크게 신경쓰지 않아도 된다고 이야기 하고 있다.</p>
<h1 id="객체-지향-구현-기법-구현-레벨"><a href="#객체-지향-구현-기법-구현-레벨" class="headerlink" title="객체 지향 구현 기법 (구현 레벨)"></a>객체 지향 구현 기법 (구현 레벨)</h1><h2 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a>캡슐화</h2><p>클래스를 구현하거나 개발된 클래스를 사용할 때 가장 중요한 것은 클래스의 경계를 구분 짓는 것이다. 데이터와 기능을 객체 내부로 함께 묶는 것을 <strong>캡슐화</strong>라고 한다.캡슐화 된 객체는 상태는 숨기고 행동만 public 인터페이스로 공개한다.</p>
<p>객체의 외부와 내부를 구분하면 클래스를 사용하는 입장에서 알아야할 지식의 양이 줄어들고, 클래스 구현자는 내부 구현을 변경할 수 있는 폭이 넓어진다.</p>
<h2 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h2><p>객체를 추상화된 형태로 제공할 수 있다. 추상화가 유연한 설계를 가능하게 하는 이유는 설계가 구체적인 상황에 결합되는 것을 방지하기 때문이다. (구체적인 상황은 항상 변경된다.) </p>
<p>주의할 점은 다형성을 이용하여 설계를 유연하게 가져갈수록 코드를 이해하고 디버깅하기는 점점 더 어려워진다. 무조건 유연한 설계도, 무조건 읽기 쉬운 코드도 정답이 아니다.</p>
<h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><p>상속이 가치있는 이유는 부모 클래스가 제공하는 모든 인터페이스를 자식 클래스가 물려받을 수 있기 때문이다. (다형성 - 업캐스팅의 활용)</p>
<p>주의할 점으로 상속은 객체지향 프로그래밍에서 코드를 재사용하기 위해 널리 사용되는 되지만 두가지 관점에서 설계에 안좋은 영향을 미친다. (이펙티브 자바에서도 동일한 내용의 챕터가 존재한다.) ****</p>
<p>구현의 재사용성으로 이용된 상속은 변경에 취약하고, 부모클래스의 캡슐화를 깨기때문에 지양해야한다. 따라서 상속의 사용 목적은 구현의 재사용보다 인터페이스를 재사용하는 것에 초점을 맞춰야 한다. </p>
<p>하지만 실제 개발시에는 상속을 통해 내부 구현을 재사용해야할 일이 생기기 마련이다. 따라서 상황에 맞게 적절히 활용하는 지혜가 요구된다.</p>
<p>상황별로 권장되는 방법은 다음과 같다.</p>
<ul>
<li>구현내용 재사용 X, 다형성 활용 O : interface (Java)</li>
<li>구현내용 재사용 O, 다형성 활용 O : abstract class (Java)</li>
<li>구현내용 재사용 O, 다형성 활용 X : composition (디자인 패턴)</li>
</ul>
<h1 id="설계의-트레이드-오프"><a href="#설계의-트레이드-오프" class="headerlink" title="설계의 트레이드 오프"></a>설계의 트레이드 오프</h1><ul>
<li>어떤 기능을 설계하는 방법은 한가지 이상일 수 있다.</li>
<li>동일한 기능을 한 가지 이상의 방법으로 설계할 수 있기 때문에 결국 설계는 트레이트 오프의 산물이다. 어떤 경우에도 모든 상황을 만족시킬 수 있는 설계를 만들 수는 없다.</li>
</ul>
<p>구현과 관련된 모든 것들이 트레이드 오프의 대상이 될 수 있다. 작성하는 모든 코드에는 합당한 이유가 있어야 한다. 비록 아주 사소한 결정이더라도 트레이드 오프를 통해 얻어진 결론과 그렇지 않은 결론 사이의 차이는 크다.</p>
]]></content>
      <tags>
        <tag>Book</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드] targetSdkVersion, compileSdkVersion, minSdkVersion 이란 무엇인가?</title>
    <url>/2019/09/20/android-api-version-manage/</url>
    <content><![CDATA[<p>보통 프로젝트를 새롭게 세팅 할경우, targetSdkVersion / compileSdkVersion / minSdkVersion 를 각각 지정할 수 있다. 세팅 이후에는 크게 건드릴 일이 없기에 평소에는 크게 신경쓰이지 않는 값이다. </p>
<p>그런데… <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLWtyLmdvb2dsZWJsb2cuY29tLzIwMTgvMDEvaW1wcm92aW5nLWFwcC1zZWN1cml0eS1hbmQtcGVyZm9ybWFuY2Utb24tZ29vZ2xlLXBsYXkuaHRtbA==" title="https://developers-kr.googleblog.com/2018/01/improving-app-security-and-performance-on-google-play.html">새로운 Google Play 방침<i class="fa fa-external-link"></i></span> 에 따르면  <strong>play store 에 등록되어 있는 앱을 업데이트 하거나, 새로 앱을 등록 할 경우 정해진 <code>targetSdkVersion</code> 을 만족해야 한다.</strong> 평소에 어렴풋하게 의미를 알고 있었는데 항상 헷갈려서 이번 기회에 정리 해보기로 했다.</p>
<p>targetSdkVersion 뿐만 아니라 compileSdkVersion, minSdkVersion  모두 <strong>안드로이드 API 버전</strong>과 관련된 값이므로 묶어서 한번에 다룰 예정이다.</p>
<hr>
<h1 id="targetSdkVersion"><a href="#targetSdkVersion" class="headerlink" title="targetSdkVersion"></a>targetSdkVersion</h1><p><strong>앱이 기기에서 동작할 때 사용되는 Android API 버전을 의미한다. (런타임)</strong> 따라서 실제 앱 동작에 영향을 주게 되므로 신중히 올려야 한다. 이때 기기의 Android OS API 버전과 혼동하여 헷갈리기 쉬우므로 각 케이스별로 분리하여 살펴보자.</p>
<p>앱은 기본적으로 targetSdkVersion 에 명시된 API 버전을 기준으로 동작한다. 예외적으로 기기 OS 버전이 낮아 아직 targetSdkVersion 의 API 버전을 지원하지 않을 경우 기기 OS 버전을 따라간다.</p>
<h3 id="1-OS-version-gt-targetSdkVersion"><a href="#1-OS-version-gt-targetSdkVersion" class="headerlink" title="1.  OS version &gt; targetSdkVersion"></a>1.  OS version &gt; targetSdkVersion</h3><ul>
<li>기기의 OS 버전 : API 26</li>
<li>앱의 targetSdkVersion : API 24</li>
</ul>
<p>해당 기기는 안드로이드 API 26 에서 제공하는 기능을 <strong>모두 사용할 수 있는</strong> 기기이다. 여기서 포인트는 사용할 수 있다는 것이지, 항상 해당 버전의 기능만 사용한다는 의미가 아니라는 것이다. </p>
<p>위 사례처럼 앱이 targetSdkVersion 값을 24 로 정했을 경우, 기기는 API 26 버전에서 제공하는 기능을 사용할 수 있지만 앱은 API 24 베이스로 동작한다.</p>
<h3 id="2-OS-version-targetSdkVersion"><a href="#2-OS-version-targetSdkVersion" class="headerlink" title="2. OS version == targetSdkVersion"></a>2. OS version == targetSdkVersion</h3><ul>
<li>기기의 OS 버전 : API 26</li>
<li>앱의 targetSdkVersion : API 26</li>
</ul>
<p>이 경우는 os 와 target 이 동일하므로, 앱이 해당 기기에서 API 26 버전 베이스로 동작한다.</p>
<h3 id="3-OS-version-lt-targetSdkVersion"><a href="#3-OS-version-lt-targetSdkVersion" class="headerlink" title="3.  OS version &lt; targetSdkVersion"></a>3.  OS version &lt; targetSdkVersion</h3><ul>
<li>기기의 OS 버전 : API 26</li>
<li>앱의 targetSdkVersion : API 27</li>
</ul>
<p>이 경우는 보통 국내 제조사들의 OS 업데이트가 늦기 때문에 발생될 수 있는 상황이다.</p>
<p>앱은 기기의 OS 버전인 API 26 베이스로 동작한다. </p>
<hr>
<h1 id="compileSdkVersion"><a href="#compileSdkVersion" class="headerlink" title="compileSdkVersion"></a>compileSdkVersion</h1><p><strong>컴파일 시 사용되는 Android API 버전을 의미한다. (컴파일 타임)</strong> 따라서 실제 개발중 사용할 수 있는 android API 범위는 compileSdkVersion 에 의해 결정된다. compileSdkVersion  값은 가급적 최신으로 유지하기를 권장하는데, targetSdkVersion 을 변경하지 않는 한 실제 배포되는 앱에 대한 사이드 이펙트가 없기 때문이다.</p>
<p>보통 최신 API 가 나오면 compileSdkVersion 을 먼저 올려서, 최신 API에 대한 대응이 완료된 후 targetSdkVersion 을 올린다. 만약 최신 버전 API 에서 새로 생긴 기능이 있고 이를 추가할 경우 warning 을 통해 하위 버전에서는 작동하지 않으므로 분기 처리를 요구한다.</p>
<p>추가로 gradle 내에 buildToolVersion 값이 있는데, 정상적인 빌드를 위해 complieSdkVersion 을 올릴 때 같이 최신버전으로 맞춰주는 것을 권장한다.</p>
<hr>
<h1 id="잠깐-버전이-분할-되어-관리되어야-하는-이유는"><a href="#잠깐-버전이-분할-되어-관리되어야-하는-이유는" class="headerlink" title="잠깐, 버전이 분할 되어 관리되어야 하는 이유는?"></a>잠깐, 버전이 분할 되어 관리되어야 하는 이유는?</h1><p>왜 안드로이드는 이렇게 각각 별도의 버전 정책을 둔 것일까? </p>
<p>이유를 유추해보면 다음과 같다. API 버전이 올라가면 Deprecated 되거나, 새롭게 추가된 것이 존재할 것이다. 이때 기기 os 버전을 기준으로 앱이 실행되도록 하면, 해당 버전이 대응이 안되어있던 앱들은 전부다 의도하지 않은 동작이 발생할 수 있다. 따라서 <strong>개발자들에게 앱이 컴파일타임과 런타임에 영향받는 API 버전을 각각 관리할 수 있도록 하여 위와 같은 문제를 예방</strong>하도록 하도록 한다.</p>
<p>최근에는 google 에서 많은 앱들이 targetSdkVersion 을 올리지 않아, 자신들이 의도한만큼 업데이트가 잘 반영되지 않고 이에 따라 좋지않은 사례들이 나오고 있음을 깨달았다. (최신 API는 당연히 이전 버전에서 문제가 되었거나 개선되어야할 점을 반영한 것이기 때문에 이전 API 보다 좋을 수 밖에 없고 빠르게 적용해주는 것이 좋다.) 이에 대한 대책으로 2018년 8월 이후로 target 을 구글이 명시한 최신버전으로 맞추지 않으면 playstore 에 업로드 및 업데이트를 할 수 없는 정책을 추가했다.</p>
<p>새로운 API가 나왔지만 아직 대응하기 어려울 경우, target 을 올리지만 않으면 된다. 하지만 되도록 최신버전은 바로 대응해주는 것이 일정관리 및 정신건강에 이롭다고 느낀다.</p>
<hr>
<h1 id="minSdkVersion"><a href="#minSdkVersion" class="headerlink" title="minSdkVersion"></a>minSdkVersion</h1><p>해당 앱을 구동할 수 있는 <strong>최소 커트라인</strong>이라고 이해하면 쉽다. 플랫폼의 OS 버전이 minSdkVersion 보다 낮을경우 앱이 설치되지 않는다.</p>
<hr>
<h1 id="API-버전-분기-처리와-SupportLibrary"><a href="#API-버전-분기-처리와-SupportLibrary" class="headerlink" title="API 버전 분기 처리와 SupportLibrary"></a>API 버전 분기 처리와 SupportLibrary</h1><p>우리는 사용자의 플랫폼이 어떤 버전을 사용하는지 미리 알 수 없기 때문에 버전별 API 변경 사항에 맞게 사용할 수 있도록 분기 처리를 해주어야 한다. </p>
<p>실제로 AndroidStudio 에서도 분기처리가 필요한 기능을 그냥 사용할 경우 warning 을 통해 알려주게 되는데 무시하고 진행해도 빌드는 정상적으로 되지만, 추후에 배포됐을 때 사용자 기기의 OS 버전에 따라 크래시가 발생할 수 있다.</p>
<h2 id="애증의-minSdkVersion"><a href="#애증의-minSdkVersion" class="headerlink" title="애증의 minSdkVersion"></a>애증의 minSdkVersion</h2><p>분기 처리를 해야하는 버전의 범위는 minSdkVersion 을 기준으로 체크한다. minSdkVersion 은 앱이 구동될 수 있는 최소 요구 버전이므로, minSdkVersion 이 낮을수록 개발 시 대응해야 하는 버전이 많고, 높을수록 대응해야 하는 버전이 적다. 다양한 버전 대응을 위한 분기 처리가 많아질 수록 관리포인트가 늘어나고, 가독성도 떨어지게 되어 점점 보기 싫어지는 코드가 된다..</p>
<p>특히 알림 기능(Notification) 의 경우 특정 버전 이상에서만 되는 기능들이 굉장히 많은데 이를 모두 분기 처리하다보면 실제 로직을 파악하기 쉽지 않다. </p>
<p>개발자 입장에서는 minSdkVersion 값이 높을 수록 대응할 버전이 줄어드로 피로도가 적으므로, 앱의 minSdkVersion 이 높은 것이 회사 복지라는 우스갯소리도 있다. (우리도 조금만 더 올렸으면 좋겠다..)</p>
<p>그래도 보통 최대한 많은 고객에게 앱을 제공하기 위해 대부분 회사는 커버러지 99.8% ~ 99.9% 에 포함되는 버전까지는 대응하는 것으로 알고 있다.</p>
<h2 id="SupportLibrary"><a href="#SupportLibrary" class="headerlink" title="SupportLibrary"></a>SupportLibrary</h2><p>위에서 살펴본 것 처럼 하위 호환성을 유지하기 위한 분기문으로 인해, 점점 코드의 가독성이 떨어지는 상황을 필연적으로 맞이하게 된다. 안드로이드에서는 다음 문제를 해결하기 위해 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL3N1cHBvcnQtbGlicmFyeQ==" title="https://developer.android.com/topic/libraries/support-library">SupportLibrary<i class="fa fa-external-link"></i></span> 라는 대안을 내놓게 되었다.</p>
<p>서포트 라이브러리는 내부적으로 버전에 대한 분기 처리가 되어있어, 별도의 추가 작업없이 바로 기능을 수행하는 코드를 작성하면 된다.</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드] 키보드 높이 구하기</title>
    <url>/2019/09/08/android-keyboard-height/</url>
    <content><![CDATA[<p>앱 개발을 진행하다보면 Keyboard 높이를 알고싶은 상황을 마주할 때가 있다. 하지만 안타깝게도 <strong>안드로이드에서 키보드 높이를 알 수 있는 native API 는 제공되지 않는다.</strong>  따라서 약간의 편법(?)을 통해 값을 알아내야 하는데, 오늘 포스팅에서는 그 과정을 다뤄보려 한다.</p>
<h1 id="원리"><a href="#원리" class="headerlink" title="원리"></a>원리</h1><p>키보드 높이를 구하는 방법에 대한 다양한 접근법이 제시되고 있으나, 결국 핵심원리는 다음과 같다.</p>
<ol>
<li>화면의 높이를 구한다.</li>
<li>키보드가 올라왔을 때, 키보드가 가리고 있는 부분을 제외한 화면의 높이를 구한다.</li>
<li>1번 값 - 2번 값 = 키보드의 높이</li>
</ol>
<h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><p>위 원리를 바탕으로 실제 구현 레벨에 들어가기 전에 화면이라는 주체를 어떤 개념으로 명확히 정할지 생각해보자. 화면이라는 단어 자체는 매우 추상적이다. 우리는 그것을 스크린 전체로, Activity 로, 하나의 View 로 생각할 수도 있다. </p>
<p>이번 주제에서는 화면을 View 라고 정하고 진행할 것이다. 그 이유는 우리가 진행하는 과정에서 활용할 수 있는 API 가 모두 View 레벨에서 제공되는 것이기 때문이다. 이 부분을 참고하면서 포스팅을 읽어주길 바란다.</p>
<h2 id="1-화면의-높이를-구한다"><a href="#1-화면의-높이를-구한다" class="headerlink" title="1. 화면의 높이를 구한다."></a>1. 화면의 높이를 구한다.</h2><p>일반적으로 안드로이드는 View.getHeight() 를 호출하는 타이밍에 우리가 원하는 높이값을 얻을 수 있다고 보장하지 않는다. 왜냐하면 View 는 여러 과정을 거쳐 자신의 크기를 결정하고 그것이 결정되는 타이밍이 우리가 크기를 요청하는 타이밍과 일치하지 않을 수 있기 때문이다.</p>
<p>따라서 정확한 View 의 높이 값을 알기 위해서는 View 가 자신의 크기가 결정된 타이밍 이후에 요청을 해야 한다. 그리고 이 과정은 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3VHJlZU9ic2VydmVyLk9uR2xvYmFsTGF5b3V0TGlzdGVuZXI=" title="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener">ViewTreeObserver.OnGlobalLayoutListener<i class="fa fa-external-link"></i></span> 를 활용하여 진행할 수 있다.</p>
<p>OnGlobalLayoutListener 는 해당 View에 변경점이 생겼을 때, 이를 콜백형태로 감지할 수 있다. 변경점의 내용중에는 View 의 크기가 결정되는 것도 포함되므로 우리는 해당 콜백이 호출되었을 때 View.getHeight() 를 호출할 경우 우리가 원하는 높이 값을 얻어낼 수 있다.</p>
<p>코드로는 다음과 같이 구할 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> viewHeight = -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">rootView.getViewTreeObserver().addOnGlobalLayoutListener(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> currentViewHeight = rootView.getHeight();</span><br><span class="line">    <span class="keyword">if</span> (currentViewHeight &gt; viewHeight) &#123;</span><br><span class="line">        viewHeight = currentViewHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h2 id="2-키보드가-올라왔을-때-키보드가-가리고-있는-부분을-제외한-화면의-높이를-구한다"><a href="#2-키보드가-올라왔을-때-키보드가-가리고-있는-부분을-제외한-화면의-높이를-구한다" class="headerlink" title="2. 키보드가 올라왔을 때, 키보드가 가리고 있는 부분을 제외한 화면의 높이를 구한다."></a>2. 키보드가 올라왔을 때, 키보드가 가리고 있는 부분을 제외한 화면의 높이를 구한다.</h2><p>이 부분은 두가지 단계로 나누어 생각해보자.</p>
<ol>
<li>현재 화면상에 보여지고 있는 영역의 크기를 구하는 것</li>
<li>키보드가 언제 올라왔는지 감지할 수 있는 것</li>
</ol>
<p><strong>첫번째단계</strong>는 안드로이드에서 제공하는 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3Lmh0bWwjZ2V0V2luZG93VmlzaWJsZURpc3BsYXlGcmFtZShhbmRyb2lkLmdyYXBoaWNzLlJlY3Qp" title="https://developer.android.com/reference/android/view/View.html#getWindowVisibleDisplayFrame(android.graphics.Rect)">View.getWindowVisibleDisplayFrame()<i class="fa fa-external-link"></i></span> 를 활용하여 해결할 수 있다.</p>
<p>getWindowVisibleDisplayFrame(Rect rect) 메소드는<br>해당 View 를 그리고 있는 <strong>window를 기준으로, 현재 보여지고 있는 영역의 크기를 반환한다</strong>.  따라서, 키보드가 올라왔을 때 해당 메소드를 호출해 값을 얻어내면 된다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Rect visibleFrameSize = <span class="keyword">new</span> Rect();</span><br><span class="line">view.getWindowVisibleDisplayFrame(visibleFrameSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> visibleFrameHeight = visibleFrameSize.bottom - visibleFrameSize.top;</span><br></pre></td></tr></table></figure>


<p><strong>두번째 단계</strong> 는 이전에 활용했던 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3VHJlZU9ic2VydmVyLk9uR2xvYmFsTGF5b3V0TGlzdGVuZXI=" title="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener">ViewTreeObserver.OnGlobalLayoutListener<i class="fa fa-external-link"></i></span> 를 다시 이용하여 해결할 수 있다.</p>
<p>키보드 활성화/ 비활성화를 감지하는 아이디어는 다음과 같다.</p>
<ol>
<li>(SoftInputMode 값에 따라 다르지만) 일반적으로 키보드가 올라오면 키보드의 크기만큼 화면의 높이가 줄어들게 된다.</li>
<li>해당 화면(View)의 ViewTreeObserver 에 OnGlobalLayoutListener 를 등록할 경우 View의 크기가 변경될 때 이를 감지할 수 있다</li>
<li>따라서 높이가 변경되는 시점을 키보드가 활성화/비활성화 된 상황이라고 추정할 수 있다. </li>
</ol>
<p>그럼 우리는 <strong>어떤 View 를 이용하여 위 과정을 진행해야할까?</strong></p>
<h3 id="1-Activity-의-RootLayout-을-이용한다"><a href="#1-Activity-의-RootLayout-을-이용한다" class="headerlink" title="1) Activity 의 RootLayout 을 이용한다."></a>1) Activity 의 RootLayout 을 이용한다.</h3><p>가장 무난하고 쉬운 선택이다. Acitivity 의 Xml 에서 root level 에 있는 layout 을 View 로 이용하는 방법이다. 실제로도 대부분의 케이스에서는 잘 동작한다.</p>
<p>하지만 이 방법은 치명적인 단점이 존재한다.  Activity 의 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvdG9waWNzL21hbmlmZXN0L2FjdGl2aXR5LWVsZW1lbnQjd3NvZnQ=" title="https://developer.android.com/guide/topics/manifest/activity-element#wsoft">windowSoftInputMode<i class="fa fa-external-link"></i></span> 옵션 값에따라 정상적으로 동작하지 않을 수 있다는 점이다.</p>
<p>windowSoftInputMode 옵션은 가상 키보드와 Activity 의 상호작용을 지정하는 옵션인데, 일부 옵션값은 <strong>키보드가 올라와도 Activity 높이의 변화가 없기 때문에</strong> 두번째 단계를 수행할 수 없다. 따라서 Acitivity 의 windowSoftInputMode 값에 의존성이 걸리게되어, 범용성 측면에서 좋은 선택이라고 하기는 어렵다.</p>
<h3 id="2-PopupWindow-를-이용한다"><a href="#2-PopupWindow-를-이용한다" class="headerlink" title="2) PopupWindow 를 이용한다."></a>2) PopupWindow 를 이용한다.</h3><p>실제 프로젝트에서 선택하여 이용하고 있다. 이 방법은 RootLayout 방식의 단점을 다음과 같이 커버할 수 있다. </p>
<p>PopupWindow 는 고유의 SoftInputMode 을 별도로 지정할 수 있다. 따라서 Acitivity windowSoftInputMode 옵션이 무엇이든 영향을 받지 않고, 독립적으로 활용이 가능하다. 따라서 GlobalLayoutListener 을 활용한 두번째 단계에서 이슈가 발생하지 않는다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardObserver</span> <span class="keyword">extends</span> <span class="title">PopupWindow</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            setSoftInputMode(SOFT_INPUT_ADJUST_RESIZE | SOFT_INPUT_STATE_ALWAYS_VISIBLE);</span><br><span class="line">            setInputMethodMode(PopupWindow.INPUT_METHOD_NEEDED);</span><br><span class="line">    </span><br><span class="line">            ...</span><br><span class="line">    </span><br><span class="line">            rootView.getViewTreeObserver().addOnGlobalLayoutListener(() -&gt; &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-키보드의-높이-구하기"><a href="#3-키보드의-높이-구하기" class="headerlink" title="3. 키보드의 높이 구하기"></a>3. 키보드의 높이 구하기</h2><p>OnGlobalLayoutListener 가 호출 됐을 때 <strong>viewHeight</strong> 값과 <strong>visibleFrameHeight</strong> 값을 이용하여 키보드의 높이를 구할 수 있다. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rootView.getViewTreeObserver().addOnGlobalLayoutListener(() -&gt; &#123;</span><br><span class="line">    getKeyboardHeight(rootView);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getKeyboardHeight</span><span class="params">(View targetView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (targetView.getHeight() &gt; viewHeight) &#123;</span><br><span class="line">            viewHeight = targetView.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Rect visibleFrameSize = <span class="keyword">new</span> Rect();</span><br><span class="line">        rootView.getWindowVisibleDisplayFrame(visibleFrameSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> visibleFrameHeight = visibleFrameSize.bottom - visibleFrameSize.top;</span><br><span class="line">        <span class="keyword">int</span> keyboardHeight = originHeight - visibleFrameHeight;</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">"keyboard"</span>, <span class="string">"size : "</span> + keyboardHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>본문에서는 log 로 키보드 값을 나타냈지만, 실제 사용 시 callback 이나 이벤트 버스를 이용하여 키보드 높이를 전달할 수 있다.</p>
<p>최종 구현 형태는 다음과 같다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardObserver</span> <span class="keyword">extends</span> <span class="title">PopupWindow</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Activity mActivity;</span><br><span class="line">    <span class="keyword">private</span> View rootView;</span><br><span class="line">    <span class="keyword">private</span> View parentView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> originHeight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KeyboardObserver</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        mActivity = activity;</span><br><span class="line">        initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isShowing() &amp;&amp; parentView.getWindowToken() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            showAtLocation(parentView, Gravity.NO_GRAVITY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dismiss();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rootView = LayoutInflater.from(mActivity).inflate(R.layout.view_keyboard_popup, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        setContentView(rootView);</span><br><span class="line">        setSoftInputMode(SOFT_INPUT_ADJUST_RESIZE | SOFT_INPUT_STATE_ALWAYS_VISIBLE);</span><br><span class="line">        setInputMethodMode(PopupWindow.INPUT_METHOD_NEEDED);</span><br><span class="line"></span><br><span class="line">        setWidth(<span class="number">0</span>);</span><br><span class="line">        setHeight(MATCH_PARENT);</span><br><span class="line"></span><br><span class="line">        parentView = mActivity.findViewById(android.R.id.content);</span><br><span class="line">        rootView.getViewTreeObserver().addOnGlobalLayoutListener(() -&gt; &#123;</span><br><span class="line">            getKeyboardHeight(rootView);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getKeyboardHeight</span><span class="params">(View targetView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (targetView.getHeight() &gt; originHeight) &#123;</span><br><span class="line">            originHeight = targetView.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line">        Rect visibleFrameSize = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line">        rootView.getWindowVisibleDisplayFrame(visibleFrameSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> visibleFrameHeight = visibleFrameSize.bottom - visibleFrameSize.top;</span><br><span class="line">        <span class="keyword">int</span> keyboardHeight = originHeight - visibleFrameHeight;</span><br><span class="line">        Log.e(<span class="string">"keyboard"</span>, <span class="string">"size : "</span> + keyboardHeight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="참고사항"><a href="#참고사항" class="headerlink" title="참고사항"></a>참고사항</h1><ul>
<li>위에서 구현된 PopupWindow 방식은 Activity 의 레퍼런스를 가지고 있기 때문에 메모리릭을 예방차원에서 반드시 onPause/onStop 생명주기내에 해당 popupWindow 를 dismiss 해줄 것.</li>
<li>위 원리를 바탕으로 키보드 높이를 구할 경우, <strong>한번도 키보드를 활성화 시키지 않은 상태에서 키보드의 높이를 구할 수는 없다.</strong> 다른 방법이 있을까 하여 비슷하게 키보드 높이를 활용한 에니메이션을 적용하는 카카오톡의 동작을 살펴보았으나, 카카오톡 역시 최초로 키보드가 활성화되기 전까지는 키보드의 높이와는 무관한 에니메이션으로 동작하는 것을 확인하였다. 디테일은 다를 수 있으나 기본적으로 높이를 구하는 원리는 비슷할 것으로 예상된다. 추후에 활성화 여부와 상관없이 구할 수 있는 방법을 알게 될 경우 따로 포스팅을 진행 해보도록 하겠다.</li>
</ul>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드] 그런 Rx Java 로 괜찮은가  2 - Mulitple API, 병렬 처리 (flatMap, merge, zip)</title>
    <url>/2019/08/10/is-this-rxjava-2/</url>
    <content><![CDATA[<p>RxJava 의 큰 장점 중 하나는 무엇이든 Observable 소스로 추상화하고, 이를 제공되는 Operation을 이용하여 손쉽게 가공할 수 있다는 점이다. 안드로이드 개발 중 가장 흔하게 접할 수 있는 케이스로는 Retrofit - RxJava 조합을 이용한 API 통신이 있다. </p>
<p>기본적인 API 콜 코드</p>
<pre><code>MyService.fetchUserData()
        .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(user -&gt; updateViewFrom(user));</code></pre><p>그런데 개발을 진행하다보면, 한번에 다수의 API 를 호출해야 할 상황을 맞이할 때가 있다. 역시 RxJava 에서 제공하는 다음 Operation 들을 활용하면 어려운 일이 아니다. 그러나 여전히 잘못 사용할 수 있는 여지가 존재한다. 기본적인 활용 방법과 주의해야할 점을 알아보자.</p>
<h1 id="Multiple-API-call"><a href="#Multiple-API-call" class="headerlink" title="Multiple API call"></a>Multiple API call</h1><p>보통 flatMap, merge, zip 3가지 옵션을 자주 활용하게 된다.</p>
<p>처음에 각 연산자의 역할과 차이점을 명확히 구별하기 어려울 수 있는데, 다음과 같은 예시로 먼저 가볍게 느낌만 알아보자. </p>
<p>어느 매장에서 치킨과 피자를 주문하였다. 이때 주문 옵션에 flatMap, merge, zip 을 선택할 수 있다.</p>
<ul>
<li><strong>치킨.flatMap(피자)</strong> 옵션을 선택한 경우 : 치킨을 조리하고, 완성된 치킨을 이용하여 피자를 만든 후 피자가 제공된다.</li>
<li><strong>merge.(치킨, 피자)</strong> 옵션을 선택한 경우 : 치킨, 피자 중 먼저 음식이 완성된 순서대로 제공된다.</li>
<li><strong>zip.(치킨, 피자, 치킨 피자 세트)</strong> 옵션을 선택한 경우 : 치킨, 피자 둘다 음식이 완성되면 치킨 피자 세트가 제공된다.</li>
</ul>
<h2 id="1-API-콜-간에-의존성이-있다-flatMap"><a href="#1-API-콜-간에-의존성이-있다-flatMap" class="headerlink" title="1. API 콜 간에 의존성이 있다 : flatMap"></a>1. API 콜 간에 의존성이 있다 : flatMap</h2><p>각 API 호출 간에 의존성이 있는 케이스에서는 flatMap 을 활용하자. 예를 들면 첫번째 API 콜을 이용하여 인증 토큰을 얻어 오고, 인증 토큰을 이용하여 두번째 API 콜을 하는 케이스.</p>
<p><strong>flatMap</strong> 연산자는 특수한 형태의 map 연산자이다. map 의 경우 다른 데이터 타입으로 가공하지만, flatMap 의 경우 <strong>다른 데이터를 발행할 수 있는</strong> <strong>Observable 소스</strong>로 가공한다. </p>
<p>첫번째 API 를 호출하고, 그 결과를 이용하여 두번째 API 를 호출하는 코드</p>
<pre><code>firstCall()
    .flatMap(firstCallResult -&gt; secondCall(firstCallResult))
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(secondCallResult -&gt; updateResult(secondCallResult))</code></pre><h2 id="2-각각의-API-결과를-한곳에서-처리하고-싶다-merge"><a href="#2-각각의-API-결과를-한곳에서-처리하고-싶다-merge" class="headerlink" title="2. 각각의 API 결과를 한곳에서 처리하고 싶다 : merge"></a>2. 각각의 API 결과를 한곳에서 처리하고 싶다 : merge</h2><p>API 가 서로 의존성이 없고, 각 결과를 하나의 옵저버에서 받고 싶을 경우 merge 를 활용하자.</p>
<p><strong>merge</strong> 연산자는 여러 개의 Observable 소스에서 발행한 데이터를 모아서(merge) 한곳에서 모두 받을 수 있도록 해준다. </p>
<p>첫번째 API, 두번째 API 를 각각 호출하고 그 결과를 처리하는 코드</p>
<pre><code>Observable.merge(firstCall(), secondCall())
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(eachResult -&gt; updateResultWithIndividual(eachResult))</code></pre><h2 id="3-각각의-API-의-결과를-조합하고-싶다-zip"><a href="#3-각각의-API-의-결과를-조합하고-싶다-zip" class="headerlink" title="3. 각각의 API 의 결과를 조합하고 싶다 : zip"></a>3. 각각의 API 의 결과를 조합하고 싶다 : zip</h2><p>각각의 API 호출 결과를 모아서 한번에 받고 싶을 경우 zip 을 활용하자.</p>
<p><strong>zip</strong> 연산자는 여러 개의 Observable 소스에서 발행한 데이터들을 모은 후, <strong>모든 Observable 소스에서 데이터가 발행이 완료 됐을 경우</strong> 모았던 데이터를 결합하여 하나의 데이터 형태로 발행한다. 이때 각 결과를 어떻게 결합 할지에 대한 정의를 해줘야 한다.</p>
<p>첫번째 API, 두번째 API 결과를 합친 결과를 처리하는 코드</p>
<pre><code>Observable.zip(
        firstCall(), 
        secondCall(), 
        (firstResult, secondResult) -&gt; new combinedResult(firstResult, secondResult)
        )
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(combinedResult -&gt; updateResult(combinedResult)</code></pre><h2 id="그외"><a href="#그외" class="headerlink" title="그외.."></a>그외..</h2><p>위 내용에서는 자주 사용 되는 3개의 연산자만 설명했지만, 그 외에도 여러 특수한 케이스에서 활용할 수 있는 연산자가 많이 있다. 또한 API 호출이 아니라 Observable 소스로 추상화될 수 있는 그 무엇이든 위 연산자 들의 정의대로 활용이 가능하니 한번 익혀두면 두고두고 유용할 것이라 생각된다.</p>
<h1 id="정말-효율적인-처리-일까-Feat-병렬처리"><a href="#정말-효율적인-처리-일까-Feat-병렬처리" class="headerlink" title="정말 효율적인 처리 일까? (Feat. 병렬처리)"></a>정말 효율적인 처리 일까? (Feat. 병렬처리)</h1><p>이전 글에서도 얘기했지만, RxJava 는 같은 작업을 처리 하더라도 접근할 수 있는 경로가 매우 다양하다. 또한 각 연산자들이 어느정도 추상화되어있는 형태이다 보니 정확히 이해하지 않고 사용할 경우 결과는 그럴듯하나 내부적으로는 비효율적으로 동작할 수 있다.</p>
<p>사실은 위 예시에서도 비효율적으로 동작하는 부분이 존재한다. 다시 zip 을 활용하는 케이스로 돌아가보자. 우리가 zip 을 활용하여 API 콜을 묶을 때 기본적으로 다음과 같이 작동할 것이라고 생각한다.</p>
<p>“두개의 API가 각각 <strong>동시에</strong> 호출되고, 각 결과가 모두 도착하면 하나의 데이터로 발행이 되겠지?” </p>
<p>그런데 실제 API 콜을 프로파일러로 분석해보면, io 스케줄러 쓰레드에서 <strong>순차적으로</strong> API 를 호출함을 알 수 있다. 즉, 비동기 처리는 되었지만 <strong>병렬로 동작하지 않게 된다.</strong></p>
<h2 id="비-효율적인-방법-병렬처리-X"><a href="#비-효율적인-방법-병렬처리-X" class="headerlink" title="비 효율적인 방법 (병렬처리 X)"></a>비 효율적인 방법 (병렬처리 X)</h2><pre><code>Observable.zip(
        firstCall(), 
        secondCall(), 
        (firstResult, secondResult) -&gt; new combinedResult(firstResult, secondResult)
        )
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(combinedResult -&gt; updateResult(combinedResult)</code></pre><p>다음 코드를 보고 이런 궁금증이 생길 수 있다.</p>
<p>‘subscribeOn 에 io 스캐쥴러를 설정해줬으니, 가장 처음 수행되는 zip 이 io 쓰레드에서 동작하는거 아닌가?’</p>
<p>맞다. zip 연산 자체는 io 쓰레드에서 수행된다. 하지만 zip 의 정의를 다시 한번 생각해보자. zip 은 단지 2개 혹은 그 이상의 Observable 소스가 발행하는 데이터를 묶어서 하나의 데이터로 발행하는 역할을 수행할 뿐이지, <strong>개별 Observable 소스의 아이템이 발행되는 쓰레드는 관여하지 않는다.</strong>  따라서 zip 연산자는 ios 쓰레드에서 <strong>순차적으로</strong> Observable 소스를 발행 했던 것이다.</p>
<h2 id="효율적인-방법-병렬처리-O"><a href="#효율적인-방법-병렬처리-O" class="headerlink" title="효율적인 방법 (병렬처리 O)"></a>효율적인 방법 (병렬처리 O)</h2><p>개별 Observable 소스가 각각 다른 쓰레드에서 아이템이 발행 되길 원할 경우 다음과 같이 소스에 스케쥴러를 각각 설정 해줘야한다.</p>
<pre><code>Observable.zip(
        firstCall().subscribeOn(Schedulers.io()), 
        secondCall().subscribeOn(Schedulers.io()), 
        (firstResult, secondResult) -&gt; new combinedResult(firstResult, secondResult)
        )
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(combinedResult -&gt; updateResult(combinedResult)</code></pre><p>또한 zip 연산에 대한 스케쥴러 설정이 사라졌는데, 사실 zip 연산 자체가 별도의 쓰레드에서 수행될 이유는 없기 때문이다. </p>
<p>zip 연산외에 merge 에서도 위 내용은 동일하게 적용되니 개발시 참고하자!</p>
<h1 id="맺으며"><a href="#맺으며" class="headerlink" title="맺으며"></a>맺으며</h1><p>RxJava 는 강력한 도구이지만 그만큼 숙지해야할 내부 정책들도 제법 많다. 이러한 정책들, 낯선 접근방식 때문에 여전히 러닝커브가 높다고 여겨지지만 한번 적응하면 이만한 도구가 없다고 느껴지는 것도 사실이다. 잘 흡수하여 무기로 갈고 닦는다면 개발시 직면하는 다양한 문제들을 해결해줄 것이라고 생각한다. 🤟</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>RxJava</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드] 그런 Rx Java 로 괜찮은가  1 - subscribeOn, observeOn</title>
    <url>/2019/07/20/is-this-rxjava-1/</url>
    <content><![CDATA[<p>구글은 점점 더 안드로이드 아키텍처를 리엑티브하게 구조화 하려는 움직임을 보이고 있고, Databinding, LiveData 그리고 RxJava 는 그러한 구조화 작업의 핵심 토대를 담당하고 있다. 또한 주력으로 사용되는 Retroift 부터 AAC 의 Room, Paging 에 이르기까지 많은 안드로이드 라이브러리가 RxJava 를 지원하고 있다. </p>
<p>시대의 흐름에 따라 이제는 거의 필수가 되어버린 RxJava 이기에 더이상 미루지 못하고 활용 방법을 익히기 시작했으나 워낙 제공되는 operation 이 많고 사람들이 사용하는 스타일도 제각각 달라서 스스로 사용법을 익히기까지 많은 시행착오를 겪어야 했다. 위 시리즈는 그동안 RxJava 를 사용하면서 겪었던 경험을 바탕으로 놓치기 쉽거나, 활용했을 때 좋았던 방식들을 적어 나가는 포스트가 될 것 같다. 깊은 수준의 내용은 아니지만, 이 글들을 통해 조금이나마 삽질의 시간을 줄이고 적절하게 RxJava 를 활용하는데 도움이 되었으면 좋겠다. </p>
<h1 id="subscribeOn-observeOn-잘-사용하고-있나"><a href="#subscribeOn-observeOn-잘-사용하고-있나" class="headerlink" title="subscribeOn, observeOn 잘 사용하고 있나?"></a>subscribeOn, observeOn 잘 사용하고 있나?</h1><h2 id="Schedular-퀴즈"><a href="#Schedular-퀴즈" class="headerlink" title="Schedular 퀴즈"></a>Schedular 퀴즈</h2><pre><code>// # 1
myService.getUsers()
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
    .flatMap(Observable::fromIterable)
    .filter(User::isMember)
    .map(this::saveToCache)
    .toList()
        .subscribe(
                users -&gt; {
        // Do UI action
    });


// # 2
myService.getUsers()
        .subscribeOn(Schedulers.io())
    .flatMap(Observable::fromIterable)
    .filter(User::isMember)
    .map(this::saveToCache)
    .toList()
    .observeOn(AndroidSchedulers.mainThread())
        .subscribe(
                users -&gt; {
        // Do UI action
    });</code></pre><p>위 두 케이스는 user 리스트를 요청하는 API 를 호출한 후 필요한 비즈니스 로직을 수행하는 코드이다.</p>
<p>각 케이스의 차이점은 observerOn, subscribeOn 의 호출 순서가 다르다는 점이다. 2개의 코드에서 각각의 스트림 연산이 어느 쓰레드에서 수행되는지 잠시 예상해보자. </p>
<p>만약 정확히 얘기할 수 있다면 이미 subscribeOn, observeOn 에 대한 이해가 충분할 것이라 예상되어 해당 글은 리마인드 차원에서 가볍게 보고 넘어가면 될 것 같다. 👏</p>
<p>위 문제의 답은 다음과 같다.<br>첫번째 케이스는 getUsers() 에 대한 연산만 io Schedular 쓰레드 위에서 수행되며, <strong>나머지 모든 하위 스트림 연산은 메인쓰레드에서 수행된다.</strong><br>두번째 케이스는 getUsers() ~ toList 연산까지 io Schedular 위에서 수행되며, subscribe 내에서 콜백으로 <strong>최종 데이터를 전달받는 연산만 메인쓰레드에서 수행된다</strong>.</p>
<p>따라서 첫번째 케이스는 굳이 메인 쓰레드에서 수행하지 않아도 될 비즈니스 로직을 수행하고 있는 것 이므로 <strong>자원의 낭비가 있는 코드</strong>라고 볼 수 있다. (만약 엄청나게 많은 리소스가 요구되는 비즈니스 로직이라면…😭)</p>
<h2 id="정의와-올바른-활용법"><a href="#정의와-올바른-활용법" class="headerlink" title="정의와 올바른 활용법"></a>정의와 올바른 활용법</h2><p>사실 각 케이스에서 subscribeOn 은 어느 순서에 호출하든 결과는 변하지 않는다. 위 결과의 차이를 만드는 것은 <strong>observeOn 의 호출 위치</strong>이다.<br>호출위치라고? subscribeOn, observeOn 의 정의를 한번 살펴보자.</p>
<blockquote>
<p>subscribeOn </p>
<ul>
<li>observable source 가 observer 에 의해 <strong>subscribe 됐을 때, source 가 데이터를 다음 스트림으로 전달하는 액션</strong>을 수행하는 스케쥴러를 지정.</li>
</ul>
</blockquote>
<blockquote>
<p>observeOn </p>
<ul>
<li><strong>observerOn 이후 수행되는 스트림의 액션</strong>을 수행하는 스케쥴러를 지정</li>
</ul>
</blockquote>
<p>간단히 얘기하면 </p>
<ul>
<li>subscribeOn 는 [첫번째 스트림 ~ observeOn 호출 전 까지의 스트림] 의 쓰레드를 지정 </li>
<li>observeOn 은 [해당 observeOn 호출 이후의 스트림] 의 쓰레드를 지정한다.</li>
</ul>
<p>위 정의에 따르면 observeOn 은 <strong>어느 순서에 호출되느냐에 따라</strong> 영향을 받는 스트림이 달라지게 된다. 따라서 첫번째 케이스는 getUsers() 이후 바로 observeOn 이 호출 됐으므로 이후 스트림의 연산이 메인쓰레드에서 수행되게 되는 것이다.</p>
<p>만약 이러한 특성을 고려하지 않고 기계적으로 코드를 작성하게 될 경우, 첫번째 케이스 처럼 작성하게 될 가능성이 있고 이는 RxJava 가 의도한 특성을 제대로 활용하지 못하고 있는 것이라고 볼 수 있다. (내가 그랬다..)</p>
<p>위 정의와 본래 의도에 맞게 다시 코드를 작성하면 아래와 같다.</p>
<pre><code>myService.getUsers()
    .subscribeOn(Schedulers.io())
    .observeOn(Schedulers.computation()) 
    .flatMap(Observable::fromIterable)
    .filter(User::isMember)
    .map(this::saveToCache)
    .toList()
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(
        users -&gt; {
        // Do UI action
    });</code></pre><ul>
<li>computation 쓰레드로 바꾸지 않고, io 쓰레드 위에서 그대로 진행되어도 상관은 없으나, 각 schedualars 가 본래 역할에 맞게 사용될 수 있도록 하기위해 바꾸었다.</li>
</ul>
<h2 id="그외-subscribeOn-observeOn-활용시-도움이-될만한-사실들"><a href="#그외-subscribeOn-observeOn-활용시-도움이-될만한-사실들" class="headerlink" title="그외 subscribeOn, observeOn 활용시 도움이 될만한 사실들"></a>그외 subscribeOn, observeOn 활용시 도움이 될만한 사실들</h2><ul>
<li>subscribeOn, observeOn 호출은 필수가 아닌 옵션이다.</li>
<li>subscribeOn, observeOn 모두 호출하지 않았을 경우 subscribe() 를 호출한 thread 에서 스트림연산이 수행된다. (일반적으로는 메인쓰레드 일 것이다.)</li>
<li>subscribeOn 은 최초 1회 호출만 적용되며, 그 이후 다시 호출하는 것은 무시된다.</li>
<li>observeOn 은 호출 횟수에 제한이 없다.</li>
<li>subscribeOn 만 호출할 수 있다. 따라서 subscribeOn 정의에 따라 모든 스트림 연산은 subscribeOn 에서 지정한 쓰레드 위에서 수행된다.<ul>
<li>observeOn(AndroidSchedulars.mainThread()) 를 기계적으로 호출하지 말자. 백그라운드 상에서 수행될 작업만 있는 스트림일 경우 subscribeOn(Schedulars.xx) 호출만으로 충분하다.</li>
</ul>
</li>
<li>observeOn 만 호출할 수 있다. (하지만 활용한 케이스 X)</li>
<li>subscribeOn 의 호출 순서는 결과에 영향을 주지 않지만, 되도록 첫번째 혹은 마지막에 호출하는 것이 가독성 측면에서 좋다고 느낀다. 특히 메소드 체이닝이 길어질 수록 더더욱 흐름 파악에 도움이 된다.</li>
</ul>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p><strong>subscribeOn / observeOn 를 상황에 맞게 활용하고, 특히 observeOn 은 호출 순서에 주의하자.</strong></p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>RxJava</tag>
      </tags>
  </entry>
  <entry>
    <title>2019년 상반기 회고</title>
    <url>/2019/07/07/2019-harf-review/</url>
    <content><![CDATA[<p>상반기에 많은 일들이 있었던 것 같은데 막상 적으려니까 잘 떠오르지 않아 당황스러웠다. 이래서 평소에 기록을 해두는 습관을 형성 해두는 것이 중요한 것 같다.</p>
<h1 id="이직"><a href="#이직" class="headerlink" title="이직"></a>이직</h1><p>1년 4개월 동안 다니던 회사를 뒤로하고 첫 이직을 했다. <span class="exturl" data-url="aHR0cHM6Ly96b3lpLmNv" title="https://zoyi.co">조이<i class="fa fa-external-link"></i></span>에서 개발자를 시작한 것은 정말 현명한 선택이었다. 입사 전과는 비교할 수 없을 만큼 많이 배우고 성장하는 시간을 보냈다. 그렇게 좋은 환경이었음에도 불구하고 이직을 하게 된 계기는 단순했다. 내 사고가 어느 한 방향으로 굳기 전에 새로운 변화를 맞이하여 자극을 주고 싶었고, 구체적인 자극으로서 좀 더 많은 유저가 사용하는 큰 스케일의 프로젝트를 개발 해보고 싶었다. 목표가 생기자 퇴근 후 새벽까지 이직 공부를 하며 여러 곳에 지원을 했고 결과적으로 <strong>NAVER</strong>에 입사를 하게 되었다.</p>
<p>사실 업무와 이직 준비를 동시에 하는 기간은 정신적으로나 육체적으로나 정말 힘들었고 포기하고 싶었던 순간이 많았다. 하지만 결과적으로 그 시간을 겪으면서 현재 내 수준을 정확히 점검할 수 있었고 당시에 정리했던 공부 내용들이 지금까지도 개발하면서 아주 큰 도움이 되고 있다. 이직할 생각이 없더라도 정기적으로 면접을 보는 경험이 좋다는 얘기가 이런 맥락에서 였나 싶었다.</p>
<p>네이버 내에서 맡게 된 서비스는 ‘네이버 카페’ 다. 사실 입사 전에 네이버 카페를 자주 쓰는 편이 아니었어서(…) 실 사용자수가 어느정도 인지 감이 없었는데, 생각했던 수치보다 10배나 높았다! 아주 많은 자극을 받게 될 것 같다. 👏  또한 개인적으로 인복이 정말 많다고 생각되는 것이, 전 회사 그리고 현재에도 정말 좋은 팀과 동료 들을 만나게 되었다. 특히 시니어분들이 보여주시는 모습은 나중에 내가 그 위치로 올라갔을 때 꼭 닮고 싶은 부분이었다. 현재는 입사 프로젝트를 마치고 작은 테스크부터 점차 수행 해나가고 있으며, 빨리 새로운 환경에 적응을 마치고 깃헙에 많은 잔디를 심고 싶다.</p>
<h1 id="개발"><a href="#개발" class="headerlink" title="개발"></a>개발</h1><p>작년 한해는 RxJava, Dagger, Clean Architecture, 함수형 프로그래밍 등 특정 기술 영역을 익히는데 관심과 시간을 투자 했다면 올해 초부터는 기본기를 좀 더 다지는 한 해를 보내고 있다. 개발을 막 시작하던 때에는 기술만 도입하면 모든 문제가 해결될 것 처럼 보였지만 역시 은탄환은 없었다. 좀 더 복잡하고 어려운 스펙, 난해한 이슈들을 맞이할수록 결국에는 기본 영역 레벨로 내려가 고민을 하게 된다. 그리고 그러한 상황들을 맞이할 때마다 내 부실한 지식과 한계를 명확히 느꼈다. 동료 개발자와 기초적인 지식과 관련하여 커뮤니케이션을 할 때, 잘 모르는 내용 이었지만 일단 아는 척을 하고 집에 가서 그 내용을 찾아볼 때는 부끄러움과 약간의 분함(?)도 찾아왔다. 위와 같은 경험을 한 뒤로는 각 분야의 기초 서적들을 구입해 퇴근 후 틈틈히 공부하고 그 내용을 노션에 정리하기 시작했다.</p>
<img src="https://user-images.githubusercontent.com/27072782/60766066-f7145700-a0de-11e9-9bc8-18b3ad08ce4d.png" class="study" width="500" height="600" title="study">

<p> 공부를 하면 할 수록 내가 겉핥기 수준으로 알고 있는 부분이 많았고, 기존의 코드들도 좀 더 깊이 이해가 되는 부분들이 생기기 시작했다. 실제로 라이브러리나 프레임워크 내부 소스코드를 분석하다 보니 곳곳에 객체지향 원칙, 자료구조 등 기본적인 지식들이  녹아져있음을 깨닫게 되었다. 아직도 부족한 수준이지만, 꾸준히 채워 나가는데 의의를 두려한다.</p>
<h1 id="개발-외적인-것들"><a href="#개발-외적인-것들" class="headerlink" title="개발 외적인 것들"></a>개발 외적인 것들</h1><p><strong>주짓수</strong></p>
<img src="https://user-images.githubusercontent.com/27072782/60766085-3e024c80-a0df-11e9-9b1e-369b9680c2fd.jpeg" class="bbj" width="500" height="500" title="bbj">

<p>친구의 지속적인 권유로 마지못해 <strong>주짓수</strong>를 시작했다. 무술류 운동은 평생 해볼일이 없을 줄 알았는데 이게 하다 보니 생각보다 재미있다..? 요즘은 입사 적응 기간이라 좀 꺾였지만 한동안은 모든 여가 시간을 주짓수로 보낼 만큼 열성을 다해서 했다. 꾸준히 운동을하면서 느낀 것이 꼭 주짓수가 아니더라도 규칙적으로 땀을 흘리는 활동은 일상생활에 많은 플러스를 가져다 준다는 것이었다. 하지만 역시나 스스로 운동을 시작한다는 것은 참으로 어려운 의지의 영역 이기에 글또 처럼 운또(?)와 같은 모임을 만들어서 운동을 꾸준히 할 수 있는 환경을 구축하는 것도 좋은 시도가 될 수 있을 것 같다.</p>
<p><strong>집밖으로!</strong><br>주말이든 휴가든 집에서 거의 나가지 않는 생활을 했었는데, 요즘은 의도적으로 집을 떠나려고 노력하고 있다. 집에서는 한없이 나태해지기 쉽기 때문에 이것을 경계 하려는 목적도 있고 다양한 환경, 다양한 사람들을 접하며 보고 느끼는 것이 삶에 긍정적인 영향을 주고 있음을 느끼고 있기 때문이다. 최근 목표로는 몽골 여행을 생각하고 있다. 일반적인 여행보다는 많이 힘들다는 얘기들이 많지만, 그렇기에 더더욱 체력이 점점 떨어지기 전에 도전 해보고싶다.</p>
<h1 id="2019년-하반기-목표"><a href="#2019년-하반기-목표" class="headerlink" title="2019년 하반기 목표"></a>2019년 하반기 목표</h1><p><strong>개발적인 측면에서는 다음과 같은 목표를 이루고 싶다.</strong></p>
<ul>
<li>네트워크 기초지식 다지기</li>
<li>서버 프레임워크를 통해 기본적인 서버구조 익히기</li>
<li>AAC 라이브러리를 활용하여 스펙 구현하기</li>
</ul>
<p><strong>개발 외적인 측면에서는 다음과 같은 목표를 이루고 싶다.</strong></p>
<ul>
<li>주짓수 블루벨트 달성</li>
<li>계족산 황톳길 등산하기</li>
<li>스노클링</li>
<li>다른 직군의 사람들과 네트워킹 2회 이상</li>
</ul>
<h1 id="글또-3기-다짐"><a href="#글또-3기-다짐" class="headerlink" title="글또 3기 다짐"></a>글또 3기 다짐</h1><p>꾸준히 무엇 인가를 하는 습관을 형성하기 위해서는 어느 정도의 강제성과 보상이 주어지는 환경이 중요하다고 생각한다. 그런 측면에서 글또라는 모임은 정말 좋은 취지로 그러한 환경을 잘 조성 해주는 것 같아서 운영하시는 분들과 성실히 참여해주시는 분들이 대단하다고 생각했었다. 1기 때부터 지원을 고민했지만 언젠간 하겠지라는 생각으로 미뤘었고, 그 언젠가는 오지 않는걸 알기에 이번에는 공고가 나오자마자 신청을 하게 됐다. 이번 회고 글을 쓰면서 평소에 글을 써본 경험이 적어서 작은 분량임에도 불구하고 작성하는 데에도 많은 시간이 소요됐지만 신기하게도 시간가는 줄 모르고 재밌게 적게되는 경험을 하게 됐다. 남은 기간 동안 서로의 글들을 통해 많은 배움과 성장이 있음을 기대하며 나도 열심히 달려 나가야겠다.</p>
]]></content>
      <tags>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드] Nullaway 를 활용하여 NullPointerException 예방하기</title>
    <url>/2018/09/21/what-is-nullaway/</url>
    <content><![CDATA[<p>한번도 <strong>NullPointerException</strong> (이하 NPE)를 겪어보지 않은 사람은 있을지 몰라도, 한번만 NPE 를 겪어본 사람은 없을것이다. NPE 로 인한 크래시가 나기 전까지는 그 존재를 알 수 없기 때문에 항상 Null 값 처리를 신경 쓰면서 개발을 진행해야 한다. 잊을만하면 나타나는 NPE를 바라보면서 한숨을 쉬고 있을 때쯤, 동료 개발자에게 미리 NPE 예방에 도움을 주는 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ViZXIvTnVsbEF3YXk=" title="https://github.com/uber/NullAway">Nullaway<i class="fa fa-external-link"></i></span> 라이브러리를 소개받았다.</p>
<p>Nullaway 는 @Nullable 어노테이션을 이용하여 <strong>Compile Time 에 Null check</strong> 검사를 수행한다. 간결하고, 강력해보인다.</p>
<h2 id="Nullaway-세팅하기"><a href="#Nullaway-세팅하기" class="headerlink" title="Nullaway 세팅하기"></a><strong>Nullaway 세팅하기</strong></h2><p><code>gradle</code> 기반으로 가이드가 되어있고, Android / Non - Android 방식으로 나뉘는데 거의 차이가 없다. 이 글에서는 Android 방식을 기준으로 설명한다.</p>
<p>App 모듈 Gradle 파일에 다음과 같이 추가해주면 설정이 끝난다.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'net.ltgt.errorprone'</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">      url <span class="string">"https://plugins.gradle.org/m2/"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath <span class="string">"net.ltgt.gradle:gradle-errorprone-plugin:0.0.13"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  &lt;!--￼<span class="number">0</span>--&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!name.toLowerCase().contains(<span class="string">"test"</span>)) &#123;</span><br><span class="line">    options.compilerArgs += [</span><br><span class="line">        <span class="string">"-Xep:NullAway:ERROR"</span>,</span><br><span class="line">        <span class="string">"-XepOpt:NullAway:AnnotatedPackages=com.your.package"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Configuration</strong></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!name.toLowerCase().contains(<span class="string">"test"</span>)) &#123;</span><br><span class="line">    options.compilerArgs += [</span><br><span class="line">        <span class="string">"-Xep:NullAway:ERROR"</span>,</span><br><span class="line">        <span class="string">"-XepOpt:NullAway:AnnotatedPackages=com.your.package"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>다른 부분은 그대로 사용해도 상관없지만 해당 부분은 각 프로젝트에 맞게 수정을 해줘야 한다. Nullaway의 적용범위를 설정할 수 있다.</p>
<p>필수로 추가해줘야 하는 부분은 <code>-XepOpt:NullAway:AnnotatedPackages</code> 옵션이다. 해당 옵션값은 Nullaway 가 검사할 패키지를 지정한다. 위 옵션값으로 지정된 패키지 및 그 하위 패키지는 Nullaway가 요구하는 @Nullable 어노테이션 처리가 모두 되어있다고 가정하며, 만약 처리가 안되어 있을 경우 빌드시 에러를 발생시킨다.</p>
<p>그외에 자주 쓰이는 옵션은 다음과 같다.</p>
<ul>
<li><code>-XepOpt:NullAway:UnannotatedSubPackages</code> : Nullaway가 요구하는 어노테이션 처리가 안되어 있는 패키지를 지정한다. 해당 패키지 및 그 하위패키지는 Nullaway 검사에서 제외된다.</li>
<li><code>-XepOpt:NullAway:ExcludedClasses</code> : Nullaway가 요구하는 어노테이션 처리가 안되어 있는 클래스를 지정한다. 해당 클래스는 Nullaway 검사에서 제외된다.</li>
</ul>
<p><strong>2개 이상의 패키지 혹은 클래스를 옵션값으로 주고 싶을 경우</strong></p>
<p>같은 옵션의 값을 여러번 추가하면 될 거 같지만, 실제로는 가장 마지막에 추가된 값만 옵션에 적용되기 때문에 원하지 않는 결과가 나올 수 있다. 따라서 2개 이상의 클래스 / 패키지를 지정하고 싶을 경우에는 정규식을 이용해야 한다.</p>
<p><em>com.project</em> 의 하위 패키지인 <em>foo</em>, <em>bar</em> 패키지를 Nullaway 검사에서 제외시키고 싶을 때</p>
<ul>
<li><code>&quot;-XepOpt:NullAway:UnannotatedSubPackages=com.project.(foo|bar)&quot;</code></li>
</ul>
<p>prefix로 <strong>test_</strong> 가 붙은 패키지들을 Nullaway 검사에서 제외시키고 싶을 때</p>
<ul>
<li><code>&quot;-XepOpt:NullAway:UnannotatedSubPackages=com.project.test_[a-zA-Z0-9.]*&quot;</code></li>
</ul>
<p>그외 자세한 설명은 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ViZXIvTnVsbEF3YXkvd2lraS9Db25maWd1cmF0aW9u" title="https://github.com/uber/NullAway/wiki/Configuration">Docs<i class="fa fa-external-link"></i></span> 를 참고!</p>
<h2 id="사용-방법"><a href="#사용-방법" class="headerlink" title="사용 방법"></a><strong>사용 방법</strong></h2><p>Android Support Library 에서 제공하는 <code>@Nullable</code> 어노테이션을 이용한다. Null 이 될 수 있는 필드, Null을 리턴할 수 있는 메소드에 <code>@Nullable</code>, Null 이 될 수 없는 필드, Null 을 리턴하지 않는 메소드는 <code>@NonNull</code> 을 추가해주면 된다. 아무런 어노테이션도 추가되지 않은 변수, 메소드는 @NonNull 로 인식한다. @Nullable 이 추가되어있는 필드는 항상 Null safe 체크 이후에 사용될 수 있고, @NonNull 이 추가되어 있는 필드는 Null 값이 들어올 수 없다는 것을 기본전제로 Null check 검사를 수행한다.</p>
<p>예제</p>
<p>아래 코드를 빌드할 경우 NonNull 타입 파라미터에 Null 이 들어갔으므로 Nullaway가 에러를 낸다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testModel</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    Log.e(<span class="string">"TEST"</span>, model.isValid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    testModel(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>따라서 다음과 같이 처리해줘야 한다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testModel</span><span class="params">(@Nullable Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (model != <span class="keyword">null</span>) &#123;</span><br><span class="line">    	Log.e(<span class="string">"TEST"</span>, model.isValid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>만약 Null check 없이 그대로 model 을 사용하려고 할 경우, 역시 에러를 낸다.</p>
<p>Nullaway가 에러를 띄워주는 케이스는 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ViZXIvTnVsbEF3YXkvd2lraS9FcnJvci1NZXNzYWdlcw==" title="https://github.com/uber/NullAway/wiki/Error-Messages">Error Messages<i class="fa fa-external-link"></i></span> 에 정리되어 있다.</p>
<h2 id="실제-프로젝트에-적용해보면서-느낀-점"><a href="#실제-프로젝트에-적용해보면서-느낀-점" class="headerlink" title="실제 프로젝트에 적용해보면서 느낀 점"></a><strong>실제 프로젝트에 적용해보면서 느낀 점</strong></h2><ol>
<li>방어코드를 잘 추가했다고 생각했음에도 처리되지 않았던 부분이 많았고, 관련 코드를 모두 수정하여 앱의 안정성을 올리는데 도움을 주었다.</li>
<li>Nullaway 소개글에 나온 것 처럼 처리 속도가 빨라 빌드시간이 추가로 더 늘어나지는 않음.</li>
<li>코드를 작성할 때 Nullable, NonNull 을 고려하게 된다는 점이 좋았음.</li>
</ol>
<p>코틀린으로 넘어가게 되면 사용하지 않아도 무방하고 자바로 계속 개발할 경우 한번 적용해보는 것을 추천한다.</p>
<p>샘플 링크 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ZhZ2Fib25kOTUvTnVsbEF3YXlTYW1wbGU=" title="https://github.com/vagabond95/NullAwaySample">https://github.com/vagabond95/NullAwaySample<i class="fa fa-external-link"></i></span></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드] TextView 에서 textIsSelectable와 LinkMovementMethod를 같이 사용할때 발생하는 이슈</title>
    <url>/2018/06/13/text_is_selectable_issue/</url>
    <content><![CDATA[<h2 id="발단"><a href="#발단" class="headerlink" title="발단"></a><strong>발단</strong></h2><p>며칠 전부터 이슈트래킹 대시보드에서 아래 에러가 빈번하게 리포트되는 일을 겪었다.</p>
<pre><code>Fatal Exception: java.lang.IndexOutOfBoundsException: setSpan (-1 ... -1) starts before 0
       at android.text.SpannableStringInternal.checkRange(SpannableStringInternal.java:442)
       at android.text.SpannableStringInternal.setSpan(SpannableStringInternal.java:163)
       at android.text.SpannableStringInternal.setSpan(SpannableStringInternal.java:152)
       at android.text.SpannableString.setSpan(SpannableString.java:46)
       at android.text.Selection.setSelection(Selection.java:76)
       at android.widget.TextView.semSetSelection(TextView.java:13203)</code></pre><p>코딩을 할 때 신경써서 범위를 지정하지 않을 경우 종종 겪는 에러였는데, 디버깅을 해도 해당 부분은 모두 예외처리가 잘 되어있어 원인을 쉽게 찾을 수 없었다.</p>
<h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a><strong>해결</strong></h2><p>그러던 중 우연히 재현 조건을 찾게 되었고, 조건은 TextView 에서 특정 텍스트를 복사하려고 드래그를 시도할 때 랜덤하게 크래시가 발생했다. 복사 기능은 TextView 의 <code>textIsSelectable</code> 옵션을 활용하여 제공하고 있었기 때문에, ‘textIsSelectable’ 과 ‘IndexOutOfBoundsException’ 키워드를 엮어 내용을 찾아보니 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTU4MzYzMDYvY2FuLWEtdGV4dHZpZXctYmUtc2VsZWN0YWJsZS1hbmQtY29udGFpbi1saW5rcw==" title="https://stackoverflow.com/questions/15836306/can-a-textview-be-selectable-and-contain-links">힌트가 될만한 정보<i class="fa fa-external-link"></i></span> 를 얻을 수 있었다.</p>
<p>내용인즉, <code>textIsSelectable</code> 옵션과 <code>LinkMovementMethod</code> 를 같이 사용했을 때 의도하지 않은 결과가 나올 수 있다는 것이었다. <strong><code>LinkMovementMethod</code> 는 안드로이드에서 제공하는 녀석이어서 원인이 될 것이라고 생각하지 못했다.</strong> 우리 프로젝트에서도 <code>textIsSelectable</code> 옵션이 적용된 TextView 에서 <code>LinkMovementMethod</code> 를 같이 사용하고 있었기에, 혹시나 하는 마음으로 위 내용을 참고하여 CustomMovementMethod 만든 후 적용시켜봤다. 그리고 다시 테스트를 반복하여 시도해본 결과 더이상 크래시가 발생하지 않았다.</p>
<h2 id="정확한-원인은"><a href="#정확한-원인은" class="headerlink" title="정확한 원인은?"></a><strong>정확한 원인은?</strong></h2><p>버그를 해결하고 나서 위 문제가 발생한 원인을 다시 생각해 봤다.</p>
<ol>
<li>발단은 span 을 적용하는 과정에서 문제가 발생한 것이었다.</li>
<li>위 재현조건에서 span 을 적용하는 상황은 <code>textIsSelectable</code> 옵션을 활성화한 TextView 에서, 특정 text 에 대해 드래그를 했을 배경에 컬러가 입혀지는 상황이다.</li>
<li>‘textIsSelectable 옵션만 적용했을 때’ 는 위 크래시가 발생하지 않는것으로 보아, <code>LinkMovementMethod</code> 내부에서 <strong>드래그 영역의 컬러에 대한 span이 적용되는 범위를 임의로 컨트롤</strong>하는 로직이 있음을 유추할 수 있었다. 좀 더 세밀하게 추적하기 위해 <code>LinkMovementMethod</code> 코드를 그대로 가져와서 로그를 추가한 뒤 다시 상황을 재현해보았다.</li>
<li><strong>원인을 찾았다!</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClickableSpan[] links = buffer.getSpans(off, off, ClickableSpan.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (links.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">          links[<span class="number">0</span>].onClick(widget);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">          Selection.setSelection(buffer,</span><br><span class="line">              buffer.getSpanStart(links[<span class="number">0</span>]),</span><br><span class="line">              buffer.getSpanEnd(links[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Selection.removeSelection(buffer);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>LinkMovementMethod 의 경우 TextView 에 대한 touch 이벤트를 감지할 수 있는 <code>onTouchEvent</code> 라는 콜백 메소드가 존재하며, 위 코드가 해당 콜백의 핵심 로직이다. 코드를 잘 살펴보면 buffer 로 들어온 text에 ClickableSpan이 없을 경우에는 buffer 의 selection 을 초기화 하는 과정을 수행한다. 그런데 위에서 적었던 stacktrace 내용을 살펴보면 드래그 영역에 대한 span 의 범위는 결국 selection 으로 부터 가져오기 때문에 selection을 초기화해버릴 경우에 의도하지 않은 동작이 발생하게 되는 것이다.</li>
</ol>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a><strong>결론</strong></h2><p>위 이슈를 겪으면서 얻은 결론은 두가지이다.</p>
<ol>
<li>TextView 에서 <code>textIsSelectable</code> 과 <code>LinkMovementMethod</code> 를 같이 사용하는 것은 좋지 않으며, 부득이하게 사용해야 할 경우 Custom 하게 만들어서 사용하는 것이 좋다.</li>
<li>Android 에서 제공하는 API도 문제의 원인이 될 수 있다. 다만 이 부분은 직접 겪기전까지는 알기 어려울 듯 하다.</li>
</ol>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>[안드로이드] API 26, Oreo Notification 대응기</title>
    <url>/2018/04/19/notification-with-oreo/</url>
    <content><![CDATA[<h2 id="들어가며"><a href="#들어가며" class="headerlink" title="들어가며"></a><strong>들어가며</strong></h2><p>안드로이드에서 제공하는 알림(Notification) 은 강력한 기능들을 제공하고 있다. 그리고 매번 API 버전이 올라갈 때마다 빈번하게 Update 가 되는 녀석이기 때문에 계속해서 주시하고 있어야하는 놈이기도 하다. 그동안 아무생각없이 copy &amp; paste 만 하면서 사용하고 있던 스스로를 돌아보며 다시한번 알림의 전반적인 사용방법에 대해 정리하고자 포스트를 적었다.</p>
<h3 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a><strong>개발 환경</strong></h3><ul>
<li>supportLibrary Version - 26.1.0</li>
<li>complileSDK Version - 26</li>
<li>targetSDK Version - 26</li>
</ul>
<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a><strong>TL; DR</strong></h2><p>오레오에서 알림 대응은 피할 수 없다. 미대응시 작동 X 😱</p>
<h2 id="오레오대응-더이상은-피할-수-없다"><a href="#오레오대응-더이상은-피할-수-없다" class="headerlink" title="오레오대응.. 더이상은 피할 수 없다?"></a><strong>오레오대응.. 더이상은 피할 수 없다?</strong></h2><p>아직 비교적 최신 버전인 오레오 대응을 굳이 처음부터 다르는 이유는 다음과 같다.</p>
<ol>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLWtyLmdvb2dsZWJsb2cuY29tLzIwMTgvMDEvaW1wcm92aW5nLWFwcC1zZWN1cml0eS1hbmQtcGVyZm9ybWFuY2Utb24tZ29vZ2xlLXBsYXkuaHRtbA==" title="https://developers-kr.googleblog.com/2018/01/improving-app-security-and-performance-on-google-play.html">새로운 Google Play 방침<i class="fa fa-external-link"></i></span> 에 따르면  play store 에 등록되어 있는 앱을 업데이트 하거나, 새로 앱을 등록 할 경우 <code>targetSdkVersion &gt;= 26</code> 을 만족해야 한다. 따라서 오레오(8.0) 대응을 피할 수 없게 되었다.</p>
<p> 2018년 하반기 부터</p>
</li>
<li><p>오레오 여러 변경 사항 중 특히 신경써줘야 할 부분은 알림(Notification) 에 대한 변경사항인데, 이를 반영하지 않을 경우 <strong>알림이 오지않는 치명적인 상황이 발생한다.</strong></p>
</li>
</ol>
<h2 id="NotifcationChannel-의-등장"><a href="#NotifcationChannel-의-등장" class="headerlink" title="NotifcationChannel 의 등장"></a><strong>NotifcationChannel 의 등장</strong></h2><p>우리가 처리해줘야하는 부분은 오레오에서 새롭게 등장한 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvbm90aWZ5LXVzZXIvY2hhbm5lbHM=" title="https://developer.android.com/training/notify-user/channels">NotificationChannel<i class="fa fa-external-link"></i></span> 과 관련되어있다. 왜 google 은 이 녀석에 대한 처리를 강제했을까? 다음 상황을 살펴보면 그 이유를 짐작할 수 있다.</p>
<p>나는 스마트폰에 알림이 쌓여있는 걸 좋아하지 않아서, 보통 대부분 앱의 알림을 꺼놓는다. 하지만 그때 아쉬운 점이 하나 있었는데, 확인하고 싶은 일부 알림 역시 받을 수 없다는 것이었다.</p>
<p>Android 7.1 (API level 25) 이하 버전에서는 모든 알림이 하나로 묶여 관리됐기 때문에 위의 아쉬운 점을 해결할 수 없었고 이에 대한 대안으로 오레오에서 NotificationChannel 이 새롭게 추가되었다.</p>
<img src="https://user-images.githubusercontent.com/27072782/60758428-7c512a80-a051-11e9-9fa2-ed4b67fbb7f8.jpg" class="notification_channel" width="200" height="120" title="notification_channel">

<p>NotificationChannel 을 적용할 경우 더이상 각 알림이 하나로 묶이지 않고, channel 별로 분리되어 유저가 유연하게 알림을 설정할 수 있다. 위와 같이 notification_practice 앱에는 각각 <code>확인하고싶은 알림</code> 과 <code>보고싶지 않은 알림</code> 채널이 있으며 각 채널별로 수신여부, 잠금화면 표시여부, 소리 &amp; 진동 설정 등 여러 옵션을 세밀하게 설정할 수 있다. 👏👏👏</p>
<h2 id="NotificationChannel-적용하기"><a href="#NotificationChannel-적용하기" class="headerlink" title="NotificationChannel 적용하기"></a><strong>NotificationChannel 적용하기</strong></h2><p>적용과정은 다음과 같다.</p>
<ol>
<li>NotifcationChannel 생성</li>
<li>NotificationManager 에 만들어둔 NotifcationChannel 을 등록</li>
<li>Notification builder 에 등록된 NotifcationChannel의 id 를 등록</li>
</ol>
<h3 id="NotificationChannel-생성-및-등록"><a href="#NotificationChannel-생성-및-등록" class="headerlink" title="NotificationChannel 생성 및 등록"></a><strong>NotificationChannel 생성 및 등록</strong></h3><pre><code>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {
    String uniqueId = &quot;uniqueId&quot;;
    String channelName = &quot;확인하고 싶은 알림&quot;;
    String description = &quot;확인하고 싶은 알림 채널입니다.&quot;;
    int importance = NotificationManager.IMPORTANCE_HIGH;

    NotificationChannel notificationChannel = new NotificationChannel(uniqueId, channelName, importance);
    notificationChannel.setDescription(description);

    NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.createNotificationChannel(notificationChannel);
  }</code></pre><p>NotificationChannel 은 support library 에서 사용할 수 없다. 즉, 오레오 이전버전에서는 지원되지 않기 때문에 반드시 버전체크를 해줘야 한다.</p>
<p>NotificationChannel 을 생성할 때 요구되는 id, name, importance 그리고 description 에 대해 간략히 설명하면 다음과 같다.</p>
<ul>
<li>id : 각 채널을 구분할 수 있는 unique 한 값</li>
<li>name : 유저에게 표시되는 채널 이름</li>
<li>importance : 알림에 대한 중요도이며 이 값에 따라 알림의 동작이 달라진다. API 25 이하버전에서 사용되던 notification priority 개념과 동일. 각 importance 값에 따른 동작의 차이는 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvbm90aWZ5LXVzZXIvY2hhbm5lbHMjaW1wb3J0YW5jZQ==" title="https://developer.android.com/training/notify-user/channels#importance">importance level<i class="fa fa-external-link"></i></span>에 잘 나와있다.</li>
<li>description : 채널에 대한 설명, 특정 채널 설정 창에서 표기됨</li>
</ul>
<h3 id="Notification-builder-생성-및-channel-id-등록"><a href="#Notification-builder-생성-및-channel-id-등록" class="headerlink" title="Notification builder 생성 및 channel id 등록"></a><strong>Notification builder 생성 및 channel id 등록</strong></h3><pre><code>NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(context, channelId);

    notificationBuilder
        .setSmallIcon(iconResource)
        .setContentTitle(title)
        .setContentText(content)
        .setPriority(NotificationCompat.PRIORITY_HIGH);

    // 기존 빌더에 Channel을 추가할 경우
    notificationBuilder
        .setSmallIcon(iconResource)
        .setContentTitle(title)
        .setContentText(content)
        .setChannlId(channlId)
        .setPriority(NotificationCompat.PRIORITY_HIGH);

    // 알림 생성!
    NotificationManagerCompat.from(context).notify(++notificationId, notificationBuilder.build());</code></pre><p>새롭게 알림 빌더를 구현할 경우 생성자에 channelId 를, 이미 사용하고 있는 빌더가 있다면 해당 빌더에 channel Id 를 추가해주면 된다. (내부 코드는 동일하다.)</p>
<p>setChannelId 을 이용하여 채널을 등록하는 방법을 택했을 때, API 25 이하 버전에서는 <code>null</code> 이 들어가겠지만 내부에서 무시되기 때문에 안심해도 된다.</p>
<h2 id="Notification-Channel-Tips"><a href="#Notification-Channel-Tips" class="headerlink" title="Notification Channel Tips"></a><strong>Notification Channel Tips</strong></h2><h3 id="채널은-딱-한번만-생성해주면-된다"><a href="#채널은-딱-한번만-생성해주면-된다" class="headerlink" title="채널은 딱 한번만 생성해주면 된다."></a><strong>채널은 딱 한번만 생성해주면 된다.</strong></h3><p>즉, 매번 알림을 만들때마다 채널을 다시 만들어줄 필요가 없다. 채널을 관리하는 유틸 클래스를 만들거나, application 클래스 등을 활용하여 재사용하는 방식으로 사용하면 된다.</p>
<h3 id="채널-정보-변경하기"><a href="#채널-정보-변경하기" class="headerlink" title="채널 정보 변경하기"></a><strong>채널 정보 변경하기</strong></h3><p>이미 등록되어 있는 채널의 정보를 다시 바꿀 수 있을까? 가능하다! 하지만, 바꿀 수 있는 정보는 <code>name</code>, <code>description</code> 뿐이며, 그외의 채널정보를 바꾸고 싶을 경우 해당 채널을 삭제한 후 새로운 정보를 가지고 있는 채널을 다시 생성해줘야 한다.</p>
<ul>
<li><p><strong>등록된 채널의 name, description 을 변경하고 싶을 경우</strong></p>
<p>  NotificationChannel notificationChannel = new NotificationChannel(uniqueId, newChannelName, importance);<br>  notificationChannel.setDescription(newDescription);</p>
<p>  NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);<br>  notificationManager.createNotificationChannel(notificationChannel);</p>
</li>
</ul>
<p>변경하고자 하는 name, description 을 가진 채널을 재등록해주면 된다. 이때 변경 전, 변경 후 채널 id가 동일한지 잘 확인하자.</p>
<ul>
<li><p><strong>등록된 채널을 삭제하고 싶을 경우</strong></p>
<p>  NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);<br>  notificationManager.deleteNotificationChannel(channelId);</p>
</li>
</ul>
<h3 id="Sound-설정도-잊지말자"><a href="#Sound-설정도-잊지말자" class="headerlink" title="Sound 설정도 잊지말자"></a><strong>Sound 설정도 잊지말자</strong></h3><ul>
<li><p>기존에는 builder 상에서 sound 설정을 해줬지만, 오레오 부터는 알림이 채널별로 관리되므로 sound 설정도 각 채널 별로 해줘야 한다.</p>
<p>  AudioAttributes audioAttributes = new AudioAttributes.Builder()</p>
<pre><code>.setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
.setUsage(AudioAttributes.USAGE_NOTIFICATION_RINGTONE)
.build();</code></pre><p>  notificationChannel.setSound(soundUri, audioAttributes);</p>
</li>
<li><p><code>setSound()</code> 메소드에는 2개의 인자가 들어가는데 첫번째, sound 는 기존에 사용하던 파일의 uri 를 넣어 주면된다. 두번째 <strong>AudioAttributes</strong> 가 이번에 새롭게 생긴 녀석인데, 위 코드와 같이 추가로 설정해주지 않으면 소리가 나오지 않는다.</p>
</li>
</ul>
<h2 id="추가로-알게된-사실들"><a href="#추가로-알게된-사실들" class="headerlink" title="추가로 알게된 사실들"></a><strong>추가로 알게된 사실들</strong></h2><ol>
<li><p><strong>priority 와 importance level 이 다를경우 무엇이 우선될까?</strong></p>
<p> 알림 빌더 생성시 API 25 이하 버전을 위해 priority 값을 반드시 설정해줘야 한다. 따라서 오레오(26) 이상의 버전은 importance 값과 priorty 값 모두 가지고 있게 되는데, 이때 (매우 드물겠지만) 각각의 값이 다를 경우 어떤 값을 따라갈까?</p>
<ul>
<li><p>importance 는 IMPORTANCE_HIGH 설정 (가장 높은 기대값)</p>
</li>
<li><p>priority 는 PRIORITY_MIN 설정 (가장 낮은 기대 값)</p>
<p>결과는 importance 를 따라감을 확인 했다.</p>
</li>
</ul>
</li>
<li><p><strong>설정한 importance / priority 값이 항상 알림의 동작을 결정한다고 보장할 수 없다.</strong></p>
<p> 위의 importance 값에 대해 설명할 때 해당 값이 알림의 동작을 결정한다고 얘기했었다. 그런데 이제와서 보장할 수 없다니?</p>
<p> docs 에서 이부분을 명확히 설명해주고 있다.</p>
</li>
</ol>
<blockquote>
<p>Although you must set the notification importance/priority as shown here, the system does not guarantee the alert behavior you’ll get. In some cases the system might change the importance level based other factors, and the user can always redefine what the importance level is for a given channel</p>
</blockquote>
<p>즉, 정리하면 importance / priority 값이 알림의 동작을 결정하는 것은 맞으나 <code>다양한 상황에서 해당 값이 바뀔 수 있으므로</code> 항상 설정해준 값대로 알림이 동작할 것이라고 판단하지 말라는 의미이다. 실제로 importance 값을 high 로 세팅한 channel 이 있어도 해당 channel 설정에서 중요도(importance) 값을 변경할 경우 high 가 아닌 가장 최근에 변경한 값으로 적용됨을 확인 할 수 있다. (사실 유저입장에서는 유저가 변경한 설정이 유지되는게 맞으므로 자연스러운 로직이다.)</p>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
</search>
